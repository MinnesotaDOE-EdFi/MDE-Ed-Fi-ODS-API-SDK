/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_SISVendor_Profile
{
    /// <summary>
    /// EdFiStaffSectionAssociationWritable
    /// </summary>
    [DataContract]
    public partial class EdFiStaffSectionAssociationWritable :  IEquatable<EdFiStaffSectionAssociationWritable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffSectionAssociationWritable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffSectionAssociationWritable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffSectionAssociationWritable" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="SectionReference">SectionReference (required).</param>
        /// <param name="StaffReference">StaffReference (required).</param>
        /// <param name="ClassroomPositionDescriptor">The type of position the Staff member holds in the specific class/section; for example:          Teacher of Record, Assistant Teacher, Support Teacher, Substitute Teacher... (required).</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiStaffSectionAssociationWritable(string Id = default(string), EdFiSectionReference SectionReference = default(EdFiSectionReference), EdFiStaffReference StaffReference = default(EdFiStaffReference), string ClassroomPositionDescriptor = default(string), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiStaffSectionAssociationWritable and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "SectionReference" is required (not null)
            if (SectionReference == null)
            {
                throw new InvalidDataException("SectionReference is a required property for EdFiStaffSectionAssociationWritable and cannot be null");
            }
            else
            {
                this.SectionReference = SectionReference;
            }
            // to ensure "StaffReference" is required (not null)
            if (StaffReference == null)
            {
                throw new InvalidDataException("StaffReference is a required property for EdFiStaffSectionAssociationWritable and cannot be null");
            }
            else
            {
                this.StaffReference = StaffReference;
            }
            // to ensure "ClassroomPositionDescriptor" is required (not null)
            if (ClassroomPositionDescriptor == null)
            {
                throw new InvalidDataException("ClassroomPositionDescriptor is a required property for EdFiStaffSectionAssociationWritable and cannot be null");
            }
            else
            {
                this.ClassroomPositionDescriptor = ClassroomPositionDescriptor;
            }
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [DataMember(Name="sectionReference", EmitDefaultValue=false)]
        public EdFiSectionReference SectionReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name="staffReference", EmitDefaultValue=false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// The type of position the Staff member holds in the specific class/section; for example:          Teacher of Record, Assistant Teacher, Support Teacher, Substitute Teacher...
        /// </summary>
        /// <value>The type of position the Staff member holds in the specific class/section; for example:          Teacher of Record, Assistant Teacher, Support Teacher, Substitute Teacher...</value>
        [DataMember(Name="classroomPositionDescriptor", EmitDefaultValue=false)]
        public string ClassroomPositionDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStaffSectionAssociationWritable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  ClassroomPositionDescriptor: ").Append(ClassroomPositionDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStaffSectionAssociationWritable);
        }

        /// <summary>
        /// Returns true if EdFiStaffSectionAssociationWritable instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStaffSectionAssociationWritable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStaffSectionAssociationWritable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SectionReference == input.SectionReference ||
                    (this.SectionReference != null &&
                    this.SectionReference.Equals(input.SectionReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.ClassroomPositionDescriptor == input.ClassroomPositionDescriptor ||
                    (this.ClassroomPositionDescriptor != null &&
                    this.ClassroomPositionDescriptor.Equals(input.ClassroomPositionDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SectionReference != null)
                    hashCode = hashCode * 59 + this.SectionReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.ClassroomPositionDescriptor != null)
                    hashCode = hashCode * 59 + this.ClassroomPositionDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClassroomPositionDescriptor (string) maxLength
            if(this.ClassroomPositionDescriptor != null && this.ClassroomPositionDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassroomPositionDescriptor, length must be less than 306.", new [] { "ClassroomPositionDescriptor" });
            }

            yield break;
        }
    }

}
