/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Profiles.Minnesota_SISVendor_Profile
{
    /// <summary>
    /// MnExamReimbursementRequestWritable
    /// </summary>
    [DataContract]
    public partial class MnExamReimbursementRequestWritable :  IEquatable<MnExamReimbursementRequestWritable>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MnExamReimbursementRequestWritable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MnExamReimbursementRequestWritable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MnExamReimbursementRequestWritable" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="TestedDate">Date student took the test. (required).</param>
        /// <param name="StudentEducationOrganizationAssociationReference">StudentEducationOrganizationAssociationReference (required).</param>
        /// <param name="AssessmentCategoryDescriptor">Test that requires reimbursement. E.g., ACT, ACT plus Writing, SAT, SAT with Essay. (required).</param>
        /// <param name="ReimbursementRequested">Reimbursement was requested. (required).</param>
        /// <param name="UnableToPay">Reimbursement for a student determined by the district as &#39;unable to pay&#39;..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public MnExamReimbursementRequestWritable(string Id = default(string), DateTime? TestedDate = default(DateTime?), MnStudentEducationOrganizationAssociationReference StudentEducationOrganizationAssociationReference = default(MnStudentEducationOrganizationAssociationReference), string AssessmentCategoryDescriptor = default(string), bool? ReimbursementRequested = default(bool?), bool? UnableToPay = default(bool?), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for MnExamReimbursementRequestWritable and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "TestedDate" is required (not null)
            if (TestedDate == null)
            {
                throw new InvalidDataException("TestedDate is a required property for MnExamReimbursementRequestWritable and cannot be null");
            }
            else
            {
                this.TestedDate = TestedDate;
            }
            // to ensure "StudentEducationOrganizationAssociationReference" is required (not null)
            if (StudentEducationOrganizationAssociationReference == null)
            {
                throw new InvalidDataException("StudentEducationOrganizationAssociationReference is a required property for MnExamReimbursementRequestWritable and cannot be null");
            }
            else
            {
                this.StudentEducationOrganizationAssociationReference = StudentEducationOrganizationAssociationReference;
            }
            // to ensure "AssessmentCategoryDescriptor" is required (not null)
            if (AssessmentCategoryDescriptor == null)
            {
                throw new InvalidDataException("AssessmentCategoryDescriptor is a required property for MnExamReimbursementRequestWritable and cannot be null");
            }
            else
            {
                this.AssessmentCategoryDescriptor = AssessmentCategoryDescriptor;
            }
            // to ensure "ReimbursementRequested" is required (not null)
            if (ReimbursementRequested == null)
            {
                throw new InvalidDataException("ReimbursementRequested is a required property for MnExamReimbursementRequestWritable and cannot be null");
            }
            else
            {
                this.ReimbursementRequested = ReimbursementRequested;
            }
            this.UnableToPay = UnableToPay;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Date student took the test.
        /// </summary>
        /// <value>Date student took the test.</value>
        [DataMember(Name="testedDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? TestedDate { get; set; }

        /// <summary>
        /// Gets or Sets StudentEducationOrganizationAssociationReference
        /// </summary>
        [DataMember(Name="studentEducationOrganizationAssociationReference", EmitDefaultValue=false)]
        public MnStudentEducationOrganizationAssociationReference StudentEducationOrganizationAssociationReference { get; set; }

        /// <summary>
        /// Test that requires reimbursement. E.g., ACT, ACT plus Writing, SAT, SAT with Essay.
        /// </summary>
        /// <value>Test that requires reimbursement. E.g., ACT, ACT plus Writing, SAT, SAT with Essay.</value>
        [DataMember(Name="assessmentCategoryDescriptor", EmitDefaultValue=false)]
        public string AssessmentCategoryDescriptor { get; set; }

        /// <summary>
        /// Reimbursement was requested.
        /// </summary>
        /// <value>Reimbursement was requested.</value>
        [DataMember(Name="reimbursementRequested", EmitDefaultValue=false)]
        public bool? ReimbursementRequested { get; set; }

        /// <summary>
        /// Reimbursement for a student determined by the district as &#39;unable to pay&#39;.
        /// </summary>
        /// <value>Reimbursement for a student determined by the district as &#39;unable to pay&#39;.</value>
        [DataMember(Name="unableToPay", EmitDefaultValue=false)]
        public bool? UnableToPay { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MnExamReimbursementRequestWritable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TestedDate: ").Append(TestedDate).Append("\n");
            sb.Append("  StudentEducationOrganizationAssociationReference: ").Append(StudentEducationOrganizationAssociationReference).Append("\n");
            sb.Append("  AssessmentCategoryDescriptor: ").Append(AssessmentCategoryDescriptor).Append("\n");
            sb.Append("  ReimbursementRequested: ").Append(ReimbursementRequested).Append("\n");
            sb.Append("  UnableToPay: ").Append(UnableToPay).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MnExamReimbursementRequestWritable);
        }

        /// <summary>
        /// Returns true if MnExamReimbursementRequestWritable instances are equal
        /// </summary>
        /// <param name="input">Instance of MnExamReimbursementRequestWritable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MnExamReimbursementRequestWritable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TestedDate == input.TestedDate ||
                    (this.TestedDate != null &&
                    this.TestedDate.Equals(input.TestedDate))
                ) && 
                (
                    this.StudentEducationOrganizationAssociationReference == input.StudentEducationOrganizationAssociationReference ||
                    (this.StudentEducationOrganizationAssociationReference != null &&
                    this.StudentEducationOrganizationAssociationReference.Equals(input.StudentEducationOrganizationAssociationReference))
                ) && 
                (
                    this.AssessmentCategoryDescriptor == input.AssessmentCategoryDescriptor ||
                    (this.AssessmentCategoryDescriptor != null &&
                    this.AssessmentCategoryDescriptor.Equals(input.AssessmentCategoryDescriptor))
                ) && 
                (
                    this.ReimbursementRequested == input.ReimbursementRequested ||
                    (this.ReimbursementRequested != null &&
                    this.ReimbursementRequested.Equals(input.ReimbursementRequested))
                ) && 
                (
                    this.UnableToPay == input.UnableToPay ||
                    (this.UnableToPay != null &&
                    this.UnableToPay.Equals(input.UnableToPay))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TestedDate != null)
                    hashCode = hashCode * 59 + this.TestedDate.GetHashCode();
                if (this.StudentEducationOrganizationAssociationReference != null)
                    hashCode = hashCode * 59 + this.StudentEducationOrganizationAssociationReference.GetHashCode();
                if (this.AssessmentCategoryDescriptor != null)
                    hashCode = hashCode * 59 + this.AssessmentCategoryDescriptor.GetHashCode();
                if (this.ReimbursementRequested != null)
                    hashCode = hashCode * 59 + this.ReimbursementRequested.GetHashCode();
                if (this.UnableToPay != null)
                    hashCode = hashCode * 59 + this.UnableToPay.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssessmentCategoryDescriptor (string) maxLength
            if(this.AssessmentCategoryDescriptor != null && this.AssessmentCategoryDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssessmentCategoryDescriptor, length must be less than 306.", new [] { "AssessmentCategoryDescriptor" });
            }

            yield break;
        }
    }

}
