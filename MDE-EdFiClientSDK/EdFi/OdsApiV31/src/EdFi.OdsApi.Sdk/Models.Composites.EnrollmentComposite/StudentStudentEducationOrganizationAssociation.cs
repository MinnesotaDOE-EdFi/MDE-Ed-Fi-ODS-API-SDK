/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Composites.EnrollmentComposite
{
    /// <summary>
    /// StudentStudentEducationOrganizationAssociation
    /// </summary>
    [DataContract]
    public partial class StudentStudentEducationOrganizationAssociation :  IEquatable<StudentStudentEducationOrganizationAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentStudentEducationOrganizationAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StudentStudentEducationOrganizationAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StudentStudentEducationOrganizationAssociation" /> class.
        /// </summary>
        /// <param name="EducationOrganizationId">The identifier assigned to an education organization. (required).</param>
        /// <param name="LoginId">The login ID for the user; used for security access control interface..</param>
        /// <param name="SexDescriptor">A person&#39;s gender. (required).</param>
        /// <param name="HispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;.</param>
        /// <param name="Addresses">An unordered collection of studentEducationOrganizationAssociationAddresses. .</param>
        /// <param name="ElectronicMails">An unordered collection of studentEducationOrganizationAssociationElectronicMails. .</param>
        /// <param name="IdentificationCodes">An unordered collection of studentEducationOrganizationAssociationStudentIdentificationCodes. .</param>
        /// <param name="Languages">An unordered collection of studentEducationOrganizationAssociationLanguages. .</param>
        /// <param name="Races">An unordered collection of studentEducationOrganizationAssociationRaces. .</param>
        /// <param name="Telephones">An unordered collection of studentEducationOrganizationAssociationTelephones. .</param>
        public StudentStudentEducationOrganizationAssociation(int? EducationOrganizationId = default(int?), string LoginId = default(string), string SexDescriptor = default(string), bool? HispanicLatinoEthnicity = default(bool?), List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationAddress> Addresses = default(List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationAddress>), List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationElectronicMail> ElectronicMails = default(List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationElectronicMail>), List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationStudentIdentificationCode> IdentificationCodes = default(List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationStudentIdentificationCode>), List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationLanguage> Languages = default(List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationLanguage>), List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationRace> Races = default(List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationRace>), List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationTelephone> Telephones = default(List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationTelephone>))
        {
            // to ensure "EducationOrganizationId" is required (not null)
            if (EducationOrganizationId == null)
            {
                throw new InvalidDataException("EducationOrganizationId is a required property for StudentStudentEducationOrganizationAssociation and cannot be null");
            }
            else
            {
                this.EducationOrganizationId = EducationOrganizationId;
            }
            // to ensure "SexDescriptor" is required (not null)
            if (SexDescriptor == null)
            {
                throw new InvalidDataException("SexDescriptor is a required property for StudentStudentEducationOrganizationAssociation and cannot be null");
            }
            else
            {
                this.SexDescriptor = SexDescriptor;
            }
            this.LoginId = LoginId;
            this.HispanicLatinoEthnicity = HispanicLatinoEthnicity;
            this.Addresses = Addresses;
            this.ElectronicMails = ElectronicMails;
            this.IdentificationCodes = IdentificationCodes;
            this.Languages = Languages;
            this.Races = Races;
            this.Telephones = Telephones;
        }
        
        /// <summary>
        /// The identifier assigned to an education organization.
        /// </summary>
        /// <value>The identifier assigned to an education organization.</value>
        [DataMember(Name="educationOrganizationId", EmitDefaultValue=false)]
        public int? EducationOrganizationId { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [DataMember(Name="loginId", EmitDefaultValue=false)]
        public string LoginId { get; set; }

        /// <summary>
        /// A person&#39;s gender.
        /// </summary>
        /// <value>A person&#39;s gender.</value>
        [DataMember(Name="sexDescriptor", EmitDefaultValue=false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;</value>
        [DataMember(Name="hispanicLatinoEthnicity", EmitDefaultValue=false)]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationAddresses. 
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationAddresses. </value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationAddress> Addresses { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationElectronicMails. 
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationElectronicMails. </value>
        [DataMember(Name="electronicMails", EmitDefaultValue=false)]
        public List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationElectronicMail> ElectronicMails { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationStudentIdentificationCodes. 
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationStudentIdentificationCodes. </value>
        [DataMember(Name="identificationCodes", EmitDefaultValue=false)]
        public List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationStudentIdentificationCode> IdentificationCodes { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationLanguages. 
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationLanguages. </value>
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationLanguage> Languages { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationRaces. 
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationRaces. </value>
        [DataMember(Name="races", EmitDefaultValue=false)]
        public List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationRace> Races { get; set; }

        /// <summary>
        /// An unordered collection of studentEducationOrganizationAssociationTelephones. 
        /// </summary>
        /// <value>An unordered collection of studentEducationOrganizationAssociationTelephones. </value>
        [DataMember(Name="telephones", EmitDefaultValue=false)]
        public List<StudentStudentEducationOrganizationAssociationStudentEducationOrganizationAssociationTelephone> Telephones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentStudentEducationOrganizationAssociation {\n");
            sb.Append("  EducationOrganizationId: ").Append(EducationOrganizationId).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StudentStudentEducationOrganizationAssociation);
        }

        /// <summary>
        /// Returns true if StudentStudentEducationOrganizationAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of StudentStudentEducationOrganizationAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentStudentEducationOrganizationAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EducationOrganizationId == input.EducationOrganizationId ||
                    (this.EducationOrganizationId != null &&
                    this.EducationOrganizationId.Equals(input.EducationOrganizationId))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    (this.HispanicLatinoEthnicity != null &&
                    this.HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.ElectronicMails == input.ElectronicMails ||
                    this.ElectronicMails != null &&
                    this.ElectronicMails.SequenceEqual(input.ElectronicMails)
                ) && 
                (
                    this.IdentificationCodes == input.IdentificationCodes ||
                    this.IdentificationCodes != null &&
                    this.IdentificationCodes.SequenceEqual(input.IdentificationCodes)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.Races == input.Races ||
                    this.Races != null &&
                    this.Races.SequenceEqual(input.Races)
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EducationOrganizationId != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationId.GetHashCode();
                if (this.LoginId != null)
                    hashCode = hashCode * 59 + this.LoginId.GetHashCode();
                if (this.SexDescriptor != null)
                    hashCode = hashCode * 59 + this.SexDescriptor.GetHashCode();
                if (this.HispanicLatinoEthnicity != null)
                    hashCode = hashCode * 59 + this.HispanicLatinoEthnicity.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.ElectronicMails != null)
                    hashCode = hashCode * 59 + this.ElectronicMails.GetHashCode();
                if (this.IdentificationCodes != null)
                    hashCode = hashCode * 59 + this.IdentificationCodes.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.Races != null)
                    hashCode = hashCode * 59 + this.Races.GetHashCode();
                if (this.Telephones != null)
                    hashCode = hashCode * 59 + this.Telephones.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LoginId (string) maxLength
            if(this.LoginId != null && this.LoginId.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginId, length must be less than 60.", new [] { "LoginId" });
            }

            // SexDescriptor (string) maxLength
            if(this.SexDescriptor != null && this.SexDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new [] { "SexDescriptor" });
            }

            yield break;
        }
    }

}
