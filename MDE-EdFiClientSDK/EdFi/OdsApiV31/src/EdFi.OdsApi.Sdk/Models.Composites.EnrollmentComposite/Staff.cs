/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Composites.EnrollmentComposite
{
    /// <summary>
    /// Staff
    /// </summary>
    [DataContract]
    public partial class Staff :  IEquatable<Staff>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Staff" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Staff() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Staff" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="Addresses">An unordered collection of staffAddresses. .</param>
        /// <param name="BirthDate">The month, day, and year on which an individual was born..</param>
        /// <param name="EducationOrganizationAssignments">An unordered collection of staffEducationOrganizationAssignmentAssociations. .</param>
        /// <param name="ElectronicMails">An unordered collection of staffElectronicMails. .</param>
        /// <param name="FirstName">A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change. (required).</param>
        /// <param name="HispanicLatinoEthnicity">An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;.</param>
        /// <param name="IdentificationCodes">An unordered collection of staffIdentificationCodes. .</param>
        /// <param name="Languages">An unordered collection of staffLanguages. .</param>
        /// <param name="LastSurname">The name borne in common by members of a family. (required).</param>
        /// <param name="LoginId">The login ID for the user; used for security access control interface..</param>
        /// <param name="PersonalTitlePrefix">A prefix used to denote the title, degree, position, or seniority of the person..</param>
        /// <param name="Races">An unordered collection of staffRaces. .</param>
        /// <param name="SexDescriptor">A person&#39;s gender..</param>
        /// <param name="StaffUniqueId">A unique alphanumeric code assigned to a staff. (required).</param>
        /// <param name="Telephones">An unordered collection of staffTelephones. .</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public Staff(string Id = default(string), List<StaffStaffAddress> Addresses = default(List<StaffStaffAddress>), DateTime? BirthDate = default(DateTime?), List<StaffStaffEducationOrganizationAssignmentAssociation> EducationOrganizationAssignments = default(List<StaffStaffEducationOrganizationAssignmentAssociation>), List<StaffStaffElectronicMail> ElectronicMails = default(List<StaffStaffElectronicMail>), string FirstName = default(string), bool? HispanicLatinoEthnicity = default(bool?), List<StaffStaffIdentificationCode> IdentificationCodes = default(List<StaffStaffIdentificationCode>), List<StaffStaffLanguage> Languages = default(List<StaffStaffLanguage>), string LastSurname = default(string), string LoginId = default(string), string PersonalTitlePrefix = default(string), List<StaffStaffRace> Races = default(List<StaffStaffRace>), string SexDescriptor = default(string), string StaffUniqueId = default(string), List<StaffStaffTelephone> Telephones = default(List<StaffStaffTelephone>), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Staff and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for Staff and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastSurname" is required (not null)
            if (LastSurname == null)
            {
                throw new InvalidDataException("LastSurname is a required property for Staff and cannot be null");
            }
            else
            {
                this.LastSurname = LastSurname;
            }
            // to ensure "StaffUniqueId" is required (not null)
            if (StaffUniqueId == null)
            {
                throw new InvalidDataException("StaffUniqueId is a required property for Staff and cannot be null");
            }
            else
            {
                this.StaffUniqueId = StaffUniqueId;
            }
            this.Addresses = Addresses;
            this.BirthDate = BirthDate;
            this.EducationOrganizationAssignments = EducationOrganizationAssignments;
            this.ElectronicMails = ElectronicMails;
            this.HispanicLatinoEthnicity = HispanicLatinoEthnicity;
            this.IdentificationCodes = IdentificationCodes;
            this.Languages = Languages;
            this.LoginId = LoginId;
            this.PersonalTitlePrefix = PersonalTitlePrefix;
            this.Races = Races;
            this.SexDescriptor = SexDescriptor;
            this.Telephones = Telephones;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// An unordered collection of staffAddresses. 
        /// </summary>
        /// <value>An unordered collection of staffAddresses. </value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<StaffStaffAddress> Addresses { get; set; }

        /// <summary>
        /// The month, day, and year on which an individual was born.
        /// </summary>
        /// <value>The month, day, and year on which an individual was born.</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// An unordered collection of staffEducationOrganizationAssignmentAssociations. 
        /// </summary>
        /// <value>An unordered collection of staffEducationOrganizationAssignmentAssociations. </value>
        [DataMember(Name="educationOrganizationAssignments", EmitDefaultValue=false)]
        public List<StaffStaffEducationOrganizationAssignmentAssociation> EducationOrganizationAssignments { get; set; }

        /// <summary>
        /// An unordered collection of staffElectronicMails. 
        /// </summary>
        /// <value>An unordered collection of staffElectronicMails. </value>
        [DataMember(Name="electronicMails", EmitDefaultValue=false)]
        public List<StaffStaffElectronicMail> ElectronicMails { get; set; }

        /// <summary>
        /// A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.
        /// </summary>
        /// <value>A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;
        /// </summary>
        /// <value>An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \&quot;Spanish origin,\&quot; can be used in addition to \&quot;Hispanic or Latino.\&quot;</value>
        [DataMember(Name="hispanicLatinoEthnicity", EmitDefaultValue=false)]
        public bool? HispanicLatinoEthnicity { get; set; }

        /// <summary>
        /// An unordered collection of staffIdentificationCodes. 
        /// </summary>
        /// <value>An unordered collection of staffIdentificationCodes. </value>
        [DataMember(Name="identificationCodes", EmitDefaultValue=false)]
        public List<StaffStaffIdentificationCode> IdentificationCodes { get; set; }

        /// <summary>
        /// An unordered collection of staffLanguages. 
        /// </summary>
        /// <value>An unordered collection of staffLanguages. </value>
        [DataMember(Name="languages", EmitDefaultValue=false)]
        public List<StaffStaffLanguage> Languages { get; set; }

        /// <summary>
        /// The name borne in common by members of a family.
        /// </summary>
        /// <value>The name borne in common by members of a family.</value>
        [DataMember(Name="lastSurname", EmitDefaultValue=false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// The login ID for the user; used for security access control interface.
        /// </summary>
        /// <value>The login ID for the user; used for security access control interface.</value>
        [DataMember(Name="loginId", EmitDefaultValue=false)]
        public string LoginId { get; set; }

        /// <summary>
        /// A prefix used to denote the title, degree, position, or seniority of the person.
        /// </summary>
        /// <value>A prefix used to denote the title, degree, position, or seniority of the person.</value>
        [DataMember(Name="personalTitlePrefix", EmitDefaultValue=false)]
        public string PersonalTitlePrefix { get; set; }

        /// <summary>
        /// An unordered collection of staffRaces. 
        /// </summary>
        /// <value>An unordered collection of staffRaces. </value>
        [DataMember(Name="races", EmitDefaultValue=false)]
        public List<StaffStaffRace> Races { get; set; }

        /// <summary>
        /// A person&#39;s gender.
        /// </summary>
        /// <value>A person&#39;s gender.</value>
        [DataMember(Name="sexDescriptor", EmitDefaultValue=false)]
        public string SexDescriptor { get; set; }

        /// <summary>
        /// A unique alphanumeric code assigned to a staff.
        /// </summary>
        /// <value>A unique alphanumeric code assigned to a staff.</value>
        [DataMember(Name="staffUniqueId", EmitDefaultValue=false)]
        public string StaffUniqueId { get; set; }

        /// <summary>
        /// An unordered collection of staffTelephones. 
        /// </summary>
        /// <value>An unordered collection of staffTelephones. </value>
        [DataMember(Name="telephones", EmitDefaultValue=false)]
        public List<StaffStaffTelephone> Telephones { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Staff {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  EducationOrganizationAssignments: ").Append(EducationOrganizationAssignments).Append("\n");
            sb.Append("  ElectronicMails: ").Append(ElectronicMails).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  HispanicLatinoEthnicity: ").Append(HispanicLatinoEthnicity).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  PersonalTitlePrefix: ").Append(PersonalTitlePrefix).Append("\n");
            sb.Append("  Races: ").Append(Races).Append("\n");
            sb.Append("  SexDescriptor: ").Append(SexDescriptor).Append("\n");
            sb.Append("  StaffUniqueId: ").Append(StaffUniqueId).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Staff);
        }

        /// <summary>
        /// Returns true if Staff instances are equal
        /// </summary>
        /// <param name="input">Instance of Staff to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Staff input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.EducationOrganizationAssignments == input.EducationOrganizationAssignments ||
                    this.EducationOrganizationAssignments != null &&
                    this.EducationOrganizationAssignments.SequenceEqual(input.EducationOrganizationAssignments)
                ) && 
                (
                    this.ElectronicMails == input.ElectronicMails ||
                    this.ElectronicMails != null &&
                    this.ElectronicMails.SequenceEqual(input.ElectronicMails)
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.HispanicLatinoEthnicity == input.HispanicLatinoEthnicity ||
                    (this.HispanicLatinoEthnicity != null &&
                    this.HispanicLatinoEthnicity.Equals(input.HispanicLatinoEthnicity))
                ) && 
                (
                    this.IdentificationCodes == input.IdentificationCodes ||
                    this.IdentificationCodes != null &&
                    this.IdentificationCodes.SequenceEqual(input.IdentificationCodes)
                ) && 
                (
                    this.Languages == input.Languages ||
                    this.Languages != null &&
                    this.Languages.SequenceEqual(input.Languages)
                ) && 
                (
                    this.LastSurname == input.LastSurname ||
                    (this.LastSurname != null &&
                    this.LastSurname.Equals(input.LastSurname))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.PersonalTitlePrefix == input.PersonalTitlePrefix ||
                    (this.PersonalTitlePrefix != null &&
                    this.PersonalTitlePrefix.Equals(input.PersonalTitlePrefix))
                ) && 
                (
                    this.Races == input.Races ||
                    this.Races != null &&
                    this.Races.SequenceEqual(input.Races)
                ) && 
                (
                    this.SexDescriptor == input.SexDescriptor ||
                    (this.SexDescriptor != null &&
                    this.SexDescriptor.Equals(input.SexDescriptor))
                ) && 
                (
                    this.StaffUniqueId == input.StaffUniqueId ||
                    (this.StaffUniqueId != null &&
                    this.StaffUniqueId.Equals(input.StaffUniqueId))
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.EducationOrganizationAssignments != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationAssignments.GetHashCode();
                if (this.ElectronicMails != null)
                    hashCode = hashCode * 59 + this.ElectronicMails.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.HispanicLatinoEthnicity != null)
                    hashCode = hashCode * 59 + this.HispanicLatinoEthnicity.GetHashCode();
                if (this.IdentificationCodes != null)
                    hashCode = hashCode * 59 + this.IdentificationCodes.GetHashCode();
                if (this.Languages != null)
                    hashCode = hashCode * 59 + this.Languages.GetHashCode();
                if (this.LastSurname != null)
                    hashCode = hashCode * 59 + this.LastSurname.GetHashCode();
                if (this.LoginId != null)
                    hashCode = hashCode * 59 + this.LoginId.GetHashCode();
                if (this.PersonalTitlePrefix != null)
                    hashCode = hashCode * 59 + this.PersonalTitlePrefix.GetHashCode();
                if (this.Races != null)
                    hashCode = hashCode * 59 + this.Races.GetHashCode();
                if (this.SexDescriptor != null)
                    hashCode = hashCode * 59 + this.SexDescriptor.GetHashCode();
                if (this.StaffUniqueId != null)
                    hashCode = hashCode * 59 + this.StaffUniqueId.GetHashCode();
                if (this.Telephones != null)
                    hashCode = hashCode * 59 + this.Telephones.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FirstName (string) maxLength
            if(this.FirstName != null && this.FirstName.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 75.", new [] { "FirstName" });
            }

            // LastSurname (string) maxLength
            if(this.LastSurname != null && this.LastSurname.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastSurname, length must be less than 75.", new [] { "LastSurname" });
            }

            // LoginId (string) maxLength
            if(this.LoginId != null && this.LoginId.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginId, length must be less than 60.", new [] { "LoginId" });
            }

            // PersonalTitlePrefix (string) maxLength
            if(this.PersonalTitlePrefix != null && this.PersonalTitlePrefix.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PersonalTitlePrefix, length must be less than 30.", new [] { "PersonalTitlePrefix" });
            }

            // SexDescriptor (string) maxLength
            if(this.SexDescriptor != null && this.SexDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SexDescriptor, length must be less than 306.", new [] { "SexDescriptor" });
            }

            // StaffUniqueId (string) maxLength
            if(this.StaffUniqueId != null && this.StaffUniqueId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StaffUniqueId, length must be less than 32.", new [] { "StaffUniqueId" });
            }

            yield break;
        }
    }

}
