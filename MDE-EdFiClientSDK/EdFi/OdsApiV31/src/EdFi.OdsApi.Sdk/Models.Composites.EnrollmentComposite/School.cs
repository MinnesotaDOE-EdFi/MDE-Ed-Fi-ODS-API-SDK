/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Composites.EnrollmentComposite
{
    /// <summary>
    /// School
    /// </summary>
    [DataContract]
    public partial class School :  IEquatable<School>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="School" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected School() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="School" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="Addresses">An unordered collection of educationOrganizationAddresses.  (required).</param>
        /// <param name="EducationOrganizationCategories">An unordered collection of educationOrganizationCategories.  (required).</param>
        /// <param name="GradeLevels">An unordered collection of schoolGradeLevels.  (required).</param>
        /// <param name="SchoolId">The identifier assigned to a school. (required).</param>
        /// <param name="IdentificationCodes">An unordered collection of educationOrganizationIdentificationCodes. .</param>
        /// <param name="InstitutionTelephones">An unordered collection of educationOrganizationInstitutionTelephones. .</param>
        /// <param name="LocalEducationAgency">LocalEducationAgency.</param>
        /// <param name="NameOfInstitution">The full, legally accepted name of the institution. (required).</param>
        /// <param name="SchoolCategories">An unordered collection of schoolCategories. .</param>
        /// <param name="SchoolTypeDescriptor">The type of education institution as classified by its primary focus..</param>
        /// <param name="ShortNameOfInstitution">A short name for the institution..</param>
        /// <param name="WebSite">The public web site address (URL) for the EducationOrganization..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public School(string Id = default(string), List<SchoolEducationOrganizationAddress> Addresses = default(List<SchoolEducationOrganizationAddress>), List<SchoolEducationOrganizationCategory> EducationOrganizationCategories = default(List<SchoolEducationOrganizationCategory>), List<SchoolSchoolGradeLevel> GradeLevels = default(List<SchoolSchoolGradeLevel>), int? SchoolId = default(int?), List<SchoolEducationOrganizationIdentificationCode> IdentificationCodes = default(List<SchoolEducationOrganizationIdentificationCode>), List<SchoolEducationOrganizationInstitutionTelephone> InstitutionTelephones = default(List<SchoolEducationOrganizationInstitutionTelephone>), SchoolLocalEducationAgency LocalEducationAgency = default(SchoolLocalEducationAgency), string NameOfInstitution = default(string), List<SchoolSchoolCategory> SchoolCategories = default(List<SchoolSchoolCategory>), string SchoolTypeDescriptor = default(string), string ShortNameOfInstitution = default(string), string WebSite = default(string), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for School and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Addresses" is required (not null)
            if (Addresses == null)
            {
                throw new InvalidDataException("Addresses is a required property for School and cannot be null");
            }
            else
            {
                this.Addresses = Addresses;
            }
            // to ensure "EducationOrganizationCategories" is required (not null)
            if (EducationOrganizationCategories == null)
            {
                throw new InvalidDataException("EducationOrganizationCategories is a required property for School and cannot be null");
            }
            else
            {
                this.EducationOrganizationCategories = EducationOrganizationCategories;
            }
            // to ensure "GradeLevels" is required (not null)
            if (GradeLevels == null)
            {
                throw new InvalidDataException("GradeLevels is a required property for School and cannot be null");
            }
            else
            {
                this.GradeLevels = GradeLevels;
            }
            // to ensure "SchoolId" is required (not null)
            if (SchoolId == null)
            {
                throw new InvalidDataException("SchoolId is a required property for School and cannot be null");
            }
            else
            {
                this.SchoolId = SchoolId;
            }
            // to ensure "NameOfInstitution" is required (not null)
            if (NameOfInstitution == null)
            {
                throw new InvalidDataException("NameOfInstitution is a required property for School and cannot be null");
            }
            else
            {
                this.NameOfInstitution = NameOfInstitution;
            }
            this.IdentificationCodes = IdentificationCodes;
            this.InstitutionTelephones = InstitutionTelephones;
            this.LocalEducationAgency = LocalEducationAgency;
            this.SchoolCategories = SchoolCategories;
            this.SchoolTypeDescriptor = SchoolTypeDescriptor;
            this.ShortNameOfInstitution = ShortNameOfInstitution;
            this.WebSite = WebSite;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// An unordered collection of educationOrganizationAddresses. 
        /// </summary>
        /// <value>An unordered collection of educationOrganizationAddresses. </value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<SchoolEducationOrganizationAddress> Addresses { get; set; }

        /// <summary>
        /// An unordered collection of educationOrganizationCategories. 
        /// </summary>
        /// <value>An unordered collection of educationOrganizationCategories. </value>
        [DataMember(Name="educationOrganizationCategories", EmitDefaultValue=false)]
        public List<SchoolEducationOrganizationCategory> EducationOrganizationCategories { get; set; }

        /// <summary>
        /// An unordered collection of schoolGradeLevels. 
        /// </summary>
        /// <value>An unordered collection of schoolGradeLevels. </value>
        [DataMember(Name="gradeLevels", EmitDefaultValue=false)]
        public List<SchoolSchoolGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// The identifier assigned to a school.
        /// </summary>
        /// <value>The identifier assigned to a school.</value>
        [DataMember(Name="schoolId", EmitDefaultValue=false)]
        public int? SchoolId { get; set; }

        /// <summary>
        /// An unordered collection of educationOrganizationIdentificationCodes. 
        /// </summary>
        /// <value>An unordered collection of educationOrganizationIdentificationCodes. </value>
        [DataMember(Name="identificationCodes", EmitDefaultValue=false)]
        public List<SchoolEducationOrganizationIdentificationCode> IdentificationCodes { get; set; }

        /// <summary>
        /// An unordered collection of educationOrganizationInstitutionTelephones. 
        /// </summary>
        /// <value>An unordered collection of educationOrganizationInstitutionTelephones. </value>
        [DataMember(Name="institutionTelephones", EmitDefaultValue=false)]
        public List<SchoolEducationOrganizationInstitutionTelephone> InstitutionTelephones { get; set; }

        /// <summary>
        /// Gets or Sets LocalEducationAgency
        /// </summary>
        [DataMember(Name="localEducationAgency", EmitDefaultValue=false)]
        public SchoolLocalEducationAgency LocalEducationAgency { get; set; }

        /// <summary>
        /// The full, legally accepted name of the institution.
        /// </summary>
        /// <value>The full, legally accepted name of the institution.</value>
        [DataMember(Name="nameOfInstitution", EmitDefaultValue=false)]
        public string NameOfInstitution { get; set; }

        /// <summary>
        /// An unordered collection of schoolCategories. 
        /// </summary>
        /// <value>An unordered collection of schoolCategories. </value>
        [DataMember(Name="schoolCategories", EmitDefaultValue=false)]
        public List<SchoolSchoolCategory> SchoolCategories { get; set; }

        /// <summary>
        /// The type of education institution as classified by its primary focus.
        /// </summary>
        /// <value>The type of education institution as classified by its primary focus.</value>
        [DataMember(Name="schoolTypeDescriptor", EmitDefaultValue=false)]
        public string SchoolTypeDescriptor { get; set; }

        /// <summary>
        /// A short name for the institution.
        /// </summary>
        /// <value>A short name for the institution.</value>
        [DataMember(Name="shortNameOfInstitution", EmitDefaultValue=false)]
        public string ShortNameOfInstitution { get; set; }

        /// <summary>
        /// The public web site address (URL) for the EducationOrganization.
        /// </summary>
        /// <value>The public web site address (URL) for the EducationOrganization.</value>
        [DataMember(Name="webSite", EmitDefaultValue=false)]
        public string WebSite { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class School {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  EducationOrganizationCategories: ").Append(EducationOrganizationCategories).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  SchoolId: ").Append(SchoolId).Append("\n");
            sb.Append("  IdentificationCodes: ").Append(IdentificationCodes).Append("\n");
            sb.Append("  InstitutionTelephones: ").Append(InstitutionTelephones).Append("\n");
            sb.Append("  LocalEducationAgency: ").Append(LocalEducationAgency).Append("\n");
            sb.Append("  NameOfInstitution: ").Append(NameOfInstitution).Append("\n");
            sb.Append("  SchoolCategories: ").Append(SchoolCategories).Append("\n");
            sb.Append("  SchoolTypeDescriptor: ").Append(SchoolTypeDescriptor).Append("\n");
            sb.Append("  ShortNameOfInstitution: ").Append(ShortNameOfInstitution).Append("\n");
            sb.Append("  WebSite: ").Append(WebSite).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as School);
        }

        /// <summary>
        /// Returns true if School instances are equal
        /// </summary>
        /// <param name="input">Instance of School to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(School input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.EducationOrganizationCategories == input.EducationOrganizationCategories ||
                    this.EducationOrganizationCategories != null &&
                    this.EducationOrganizationCategories.SequenceEqual(input.EducationOrganizationCategories)
                ) && 
                (
                    this.GradeLevels == input.GradeLevels ||
                    this.GradeLevels != null &&
                    this.GradeLevels.SequenceEqual(input.GradeLevels)
                ) && 
                (
                    this.SchoolId == input.SchoolId ||
                    (this.SchoolId != null &&
                    this.SchoolId.Equals(input.SchoolId))
                ) && 
                (
                    this.IdentificationCodes == input.IdentificationCodes ||
                    this.IdentificationCodes != null &&
                    this.IdentificationCodes.SequenceEqual(input.IdentificationCodes)
                ) && 
                (
                    this.InstitutionTelephones == input.InstitutionTelephones ||
                    this.InstitutionTelephones != null &&
                    this.InstitutionTelephones.SequenceEqual(input.InstitutionTelephones)
                ) && 
                (
                    this.LocalEducationAgency == input.LocalEducationAgency ||
                    (this.LocalEducationAgency != null &&
                    this.LocalEducationAgency.Equals(input.LocalEducationAgency))
                ) && 
                (
                    this.NameOfInstitution == input.NameOfInstitution ||
                    (this.NameOfInstitution != null &&
                    this.NameOfInstitution.Equals(input.NameOfInstitution))
                ) && 
                (
                    this.SchoolCategories == input.SchoolCategories ||
                    this.SchoolCategories != null &&
                    this.SchoolCategories.SequenceEqual(input.SchoolCategories)
                ) && 
                (
                    this.SchoolTypeDescriptor == input.SchoolTypeDescriptor ||
                    (this.SchoolTypeDescriptor != null &&
                    this.SchoolTypeDescriptor.Equals(input.SchoolTypeDescriptor))
                ) && 
                (
                    this.ShortNameOfInstitution == input.ShortNameOfInstitution ||
                    (this.ShortNameOfInstitution != null &&
                    this.ShortNameOfInstitution.Equals(input.ShortNameOfInstitution))
                ) && 
                (
                    this.WebSite == input.WebSite ||
                    (this.WebSite != null &&
                    this.WebSite.Equals(input.WebSite))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.EducationOrganizationCategories != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationCategories.GetHashCode();
                if (this.GradeLevels != null)
                    hashCode = hashCode * 59 + this.GradeLevels.GetHashCode();
                if (this.SchoolId != null)
                    hashCode = hashCode * 59 + this.SchoolId.GetHashCode();
                if (this.IdentificationCodes != null)
                    hashCode = hashCode * 59 + this.IdentificationCodes.GetHashCode();
                if (this.InstitutionTelephones != null)
                    hashCode = hashCode * 59 + this.InstitutionTelephones.GetHashCode();
                if (this.LocalEducationAgency != null)
                    hashCode = hashCode * 59 + this.LocalEducationAgency.GetHashCode();
                if (this.NameOfInstitution != null)
                    hashCode = hashCode * 59 + this.NameOfInstitution.GetHashCode();
                if (this.SchoolCategories != null)
                    hashCode = hashCode * 59 + this.SchoolCategories.GetHashCode();
                if (this.SchoolTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.SchoolTypeDescriptor.GetHashCode();
                if (this.ShortNameOfInstitution != null)
                    hashCode = hashCode * 59 + this.ShortNameOfInstitution.GetHashCode();
                if (this.WebSite != null)
                    hashCode = hashCode * 59 + this.WebSite.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NameOfInstitution (string) maxLength
            if(this.NameOfInstitution != null && this.NameOfInstitution.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NameOfInstitution, length must be less than 75.", new [] { "NameOfInstitution" });
            }

            // SchoolTypeDescriptor (string) maxLength
            if(this.SchoolTypeDescriptor != null && this.SchoolTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SchoolTypeDescriptor, length must be less than 306.", new [] { "SchoolTypeDescriptor" });
            }

            // ShortNameOfInstitution (string) maxLength
            if(this.ShortNameOfInstitution != null && this.ShortNameOfInstitution.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShortNameOfInstitution, length must be less than 75.", new [] { "ShortNameOfInstitution" });
            }

            // WebSite (string) maxLength
            if(this.WebSite != null && this.WebSite.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WebSite, length must be less than 255.", new [] { "WebSite" });
            }

            yield break;
        }
    }

}
