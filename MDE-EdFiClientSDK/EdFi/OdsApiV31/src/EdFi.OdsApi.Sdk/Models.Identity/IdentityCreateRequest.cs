/* 
 * Identity API Endpoints
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Identity
{
    /// <summary>
    /// IdentityCreateRequest
    /// </summary>
    [DataContract]
    public partial class IdentityCreateRequest :  IEquatable<IdentityCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityCreateRequest" /> class.
        /// </summary>
        /// <param name="BirthDate">BirthDate.</param>
        /// <param name="BirthLocation">BirthLocation.</param>
        /// <param name="BirthOrder">BirthOrder.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="GenerationCodeSuffix">GenerationCodeSuffix.</param>
        /// <param name="LastSurname">LastSurname.</param>
        /// <param name="MiddleName">MiddleName.</param>
        /// <param name="SexType">SexType.</param>
        public IdentityCreateRequest(DateTime? BirthDate = default(DateTime?), Location BirthLocation = default(Location), int? BirthOrder = default(int?), string FirstName = default(string), string GenerationCodeSuffix = default(string), string LastSurname = default(string), string MiddleName = default(string), string SexType = default(string))
        {
            this.BirthDate = BirthDate;
            this.BirthLocation = BirthLocation;
            this.BirthOrder = BirthOrder;
            this.FirstName = FirstName;
            this.GenerationCodeSuffix = GenerationCodeSuffix;
            this.LastSurname = LastSurname;
            this.MiddleName = MiddleName;
            this.SexType = SexType;
        }
        
        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [DataMember(Name="BirthDate", EmitDefaultValue=false)]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets BirthLocation
        /// </summary>
        [DataMember(Name="BirthLocation", EmitDefaultValue=false)]
        public Location BirthLocation { get; set; }

        /// <summary>
        /// Gets or Sets BirthOrder
        /// </summary>
        [DataMember(Name="BirthOrder", EmitDefaultValue=false)]
        public int? BirthOrder { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="FirstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets GenerationCodeSuffix
        /// </summary>
        [DataMember(Name="GenerationCodeSuffix", EmitDefaultValue=false)]
        public string GenerationCodeSuffix { get; set; }

        /// <summary>
        /// Gets or Sets LastSurname
        /// </summary>
        [DataMember(Name="LastSurname", EmitDefaultValue=false)]
        public string LastSurname { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name="MiddleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets SexType
        /// </summary>
        [DataMember(Name="SexType", EmitDefaultValue=false)]
        public string SexType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityCreateRequest {\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  BirthLocation: ").Append(BirthLocation).Append("\n");
            sb.Append("  BirthOrder: ").Append(BirthOrder).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  GenerationCodeSuffix: ").Append(GenerationCodeSuffix).Append("\n");
            sb.Append("  LastSurname: ").Append(LastSurname).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  SexType: ").Append(SexType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityCreateRequest);
        }

        /// <summary>
        /// Returns true if IdentityCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.BirthLocation == input.BirthLocation ||
                    (this.BirthLocation != null &&
                    this.BirthLocation.Equals(input.BirthLocation))
                ) && 
                (
                    this.BirthOrder == input.BirthOrder ||
                    (this.BirthOrder != null &&
                    this.BirthOrder.Equals(input.BirthOrder))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.GenerationCodeSuffix == input.GenerationCodeSuffix ||
                    (this.GenerationCodeSuffix != null &&
                    this.GenerationCodeSuffix.Equals(input.GenerationCodeSuffix))
                ) && 
                (
                    this.LastSurname == input.LastSurname ||
                    (this.LastSurname != null &&
                    this.LastSurname.Equals(input.LastSurname))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.SexType == input.SexType ||
                    (this.SexType != null &&
                    this.SexType.Equals(input.SexType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.BirthLocation != null)
                    hashCode = hashCode * 59 + this.BirthLocation.GetHashCode();
                if (this.BirthOrder != null)
                    hashCode = hashCode * 59 + this.BirthOrder.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.GenerationCodeSuffix != null)
                    hashCode = hashCode * 59 + this.GenerationCodeSuffix.GetHashCode();
                if (this.LastSurname != null)
                    hashCode = hashCode * 59 + this.LastSurname.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.SexType != null)
                    hashCode = hashCode * 59 + this.SexType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
