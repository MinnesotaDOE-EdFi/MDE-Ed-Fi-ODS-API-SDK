/* 
 * Bulk API Endpoints
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Bulk
{
    /// <summary>
    /// BulkOperationException
    /// </summary>
    [DataContract]
    public partial class BulkOperationException :  IEquatable<BulkOperationException>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkOperationException" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BulkOperationException() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkOperationException" /> class.
        /// </summary>
        /// <param name="Element">Element (required).</param>
        /// <param name="Id">Id (required).</param>
        /// <param name="Message">Message (required).</param>
        /// <param name="Type">Type (required).</param>
        /// <param name="UploadFileId">UploadFileId (required).</param>
        public BulkOperationException(string Element = default(string), int? Id = default(int?), string Message = default(string), string Type = default(string), string UploadFileId = default(string))
        {
            // to ensure "Element" is required (not null)
            if (Element == null)
            {
                throw new InvalidDataException("Element is a required property for BulkOperationException and cannot be null");
            }
            else
            {
                this.Element = Element;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for BulkOperationException and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for BulkOperationException and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for BulkOperationException and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "UploadFileId" is required (not null)
            if (UploadFileId == null)
            {
                throw new InvalidDataException("UploadFileId is a required property for BulkOperationException and cannot be null");
            }
            else
            {
                this.UploadFileId = UploadFileId;
            }
        }
        
        /// <summary>
        /// Gets or Sets Element
        /// </summary>
        [DataMember(Name="element", EmitDefaultValue=false)]
        public string Element { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UploadFileId
        /// </summary>
        [DataMember(Name="uploadFileId", EmitDefaultValue=false)]
        public string UploadFileId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkOperationException {\n");
            sb.Append("  Element: ").Append(Element).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UploadFileId: ").Append(UploadFileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BulkOperationException);
        }

        /// <summary>
        /// Returns true if BulkOperationException instances are equal
        /// </summary>
        /// <param name="input">Instance of BulkOperationException to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkOperationException input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Element == input.Element ||
                    (this.Element != null &&
                    this.Element.Equals(input.Element))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UploadFileId == input.UploadFileId ||
                    (this.UploadFileId != null &&
                    this.UploadFileId.Equals(input.UploadFileId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Element != null)
                    hashCode = hashCode * 59 + this.Element.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UploadFileId != null)
                    hashCode = hashCode * 59 + this.UploadFileId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
