/* 
 * Bulk API Endpoints
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.Bulk
{
    /// <summary>
    /// UploadFileRequest
    /// </summary>
    [DataContract]
    public partial class UploadFileRequest :  IEquatable<UploadFileRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadFileRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadFileRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadFileRequest" /> class.
        /// </summary>
        /// <param name="Format">Format (required).</param>
        /// <param name="InterchangeType">InterchangeType (required).</param>
        /// <param name="Size">Size (required).</param>
        public UploadFileRequest(string Format = default(string), string InterchangeType = default(string), long? Size = default(long?))
        {
            // to ensure "Format" is required (not null)
            if (Format == null)
            {
                throw new InvalidDataException("Format is a required property for UploadFileRequest and cannot be null");
            }
            else
            {
                this.Format = Format;
            }
            // to ensure "InterchangeType" is required (not null)
            if (InterchangeType == null)
            {
                throw new InvalidDataException("InterchangeType is a required property for UploadFileRequest and cannot be null");
            }
            else
            {
                this.InterchangeType = InterchangeType;
            }
            // to ensure "Size" is required (not null)
            if (Size == null)
            {
                throw new InvalidDataException("Size is a required property for UploadFileRequest and cannot be null");
            }
            else
            {
                this.Size = Size;
            }
        }
        
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets InterchangeType
        /// </summary>
        [DataMember(Name="interchangeType", EmitDefaultValue=false)]
        public string InterchangeType { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long? Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadFileRequest {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  InterchangeType: ").Append(InterchangeType).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadFileRequest);
        }

        /// <summary>
        /// Returns true if UploadFileRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadFileRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadFileRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.InterchangeType == input.InterchangeType ||
                    (this.InterchangeType != null &&
                    this.InterchangeType.Equals(input.InterchangeType))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.InterchangeType != null)
                    hashCode = hashCode * 59 + this.InterchangeType.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
