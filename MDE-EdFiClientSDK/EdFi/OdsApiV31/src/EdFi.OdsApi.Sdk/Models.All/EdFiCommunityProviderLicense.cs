/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiCommunityProviderLicense
    /// </summary>
    [DataContract]
    public partial class EdFiCommunityProviderLicense :  IEquatable<EdFiCommunityProviderLicense>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCommunityProviderLicense" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCommunityProviderLicense() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCommunityProviderLicense" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="LicenseIdentifier">The unique identifier issued by the licensing organization. (required).</param>
        /// <param name="LicensingOrganization">The organization issuing the license. (required).</param>
        /// <param name="CommunityProviderReference">CommunityProviderReference (required).</param>
        /// <param name="AuthorizedFacilityCapacity">The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve..</param>
        /// <param name="LicenseEffectiveDate">The month, day, and year on which a license is active or becomes effective. (required).</param>
        /// <param name="LicenseExpirationDate">The month, day, and year on which a license will expire..</param>
        /// <param name="LicenseIssueDate">The month, day, and year on which an active license was issued..</param>
        /// <param name="LicenseStatusDescriptor">An indication of the status of the license..</param>
        /// <param name="LicenseTypeDescriptor">An indication of the category of the license. (required).</param>
        /// <param name="OldestAgeAuthorizedToServe">The oldest age of children a provider is authorized or licensed to serve..</param>
        /// <param name="YoungestAgeAuthorizedToServe">The youngest age of children a provider is authorized or licensed to serve..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiCommunityProviderLicense(string Id = default(string), string LicenseIdentifier = default(string), string LicensingOrganization = default(string), EdFiCommunityProviderReference CommunityProviderReference = default(EdFiCommunityProviderReference), int? AuthorizedFacilityCapacity = default(int?), DateTime? LicenseEffectiveDate = default(DateTime?), DateTime? LicenseExpirationDate = default(DateTime?), DateTime? LicenseIssueDate = default(DateTime?), string LicenseStatusDescriptor = default(string), string LicenseTypeDescriptor = default(string), int? OldestAgeAuthorizedToServe = default(int?), int? YoungestAgeAuthorizedToServe = default(int?), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiCommunityProviderLicense and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "LicenseIdentifier" is required (not null)
            if (LicenseIdentifier == null)
            {
                throw new InvalidDataException("LicenseIdentifier is a required property for EdFiCommunityProviderLicense and cannot be null");
            }
            else
            {
                this.LicenseIdentifier = LicenseIdentifier;
            }
            // to ensure "LicensingOrganization" is required (not null)
            if (LicensingOrganization == null)
            {
                throw new InvalidDataException("LicensingOrganization is a required property for EdFiCommunityProviderLicense and cannot be null");
            }
            else
            {
                this.LicensingOrganization = LicensingOrganization;
            }
            // to ensure "CommunityProviderReference" is required (not null)
            if (CommunityProviderReference == null)
            {
                throw new InvalidDataException("CommunityProviderReference is a required property for EdFiCommunityProviderLicense and cannot be null");
            }
            else
            {
                this.CommunityProviderReference = CommunityProviderReference;
            }
            // to ensure "LicenseEffectiveDate" is required (not null)
            if (LicenseEffectiveDate == null)
            {
                throw new InvalidDataException("LicenseEffectiveDate is a required property for EdFiCommunityProviderLicense and cannot be null");
            }
            else
            {
                this.LicenseEffectiveDate = LicenseEffectiveDate;
            }
            // to ensure "LicenseTypeDescriptor" is required (not null)
            if (LicenseTypeDescriptor == null)
            {
                throw new InvalidDataException("LicenseTypeDescriptor is a required property for EdFiCommunityProviderLicense and cannot be null");
            }
            else
            {
                this.LicenseTypeDescriptor = LicenseTypeDescriptor;
            }
            this.AuthorizedFacilityCapacity = AuthorizedFacilityCapacity;
            this.LicenseExpirationDate = LicenseExpirationDate;
            this.LicenseIssueDate = LicenseIssueDate;
            this.LicenseStatusDescriptor = LicenseStatusDescriptor;
            this.OldestAgeAuthorizedToServe = OldestAgeAuthorizedToServe;
            this.YoungestAgeAuthorizedToServe = YoungestAgeAuthorizedToServe;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The unique identifier issued by the licensing organization.
        /// </summary>
        /// <value>The unique identifier issued by the licensing organization.</value>
        [DataMember(Name="licenseIdentifier", EmitDefaultValue=false)]
        public string LicenseIdentifier { get; set; }

        /// <summary>
        /// The organization issuing the license.
        /// </summary>
        /// <value>The organization issuing the license.</value>
        [DataMember(Name="licensingOrganization", EmitDefaultValue=false)]
        public string LicensingOrganization { get; set; }

        /// <summary>
        /// Gets or Sets CommunityProviderReference
        /// </summary>
        [DataMember(Name="communityProviderReference", EmitDefaultValue=false)]
        public EdFiCommunityProviderReference CommunityProviderReference { get; set; }

        /// <summary>
        /// The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.
        /// </summary>
        /// <value>The maximum number that can be contained or accommodated which a provider is authorized or licensed to serve.</value>
        [DataMember(Name="authorizedFacilityCapacity", EmitDefaultValue=false)]
        public int? AuthorizedFacilityCapacity { get; set; }

        /// <summary>
        /// The month, day, and year on which a license is active or becomes effective.
        /// </summary>
        /// <value>The month, day, and year on which a license is active or becomes effective.</value>
        [DataMember(Name="licenseEffectiveDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LicenseEffectiveDate { get; set; }

        /// <summary>
        /// The month, day, and year on which a license will expire.
        /// </summary>
        /// <value>The month, day, and year on which a license will expire.</value>
        [DataMember(Name="licenseExpirationDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LicenseExpirationDate { get; set; }

        /// <summary>
        /// The month, day, and year on which an active license was issued.
        /// </summary>
        /// <value>The month, day, and year on which an active license was issued.</value>
        [DataMember(Name="licenseIssueDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? LicenseIssueDate { get; set; }

        /// <summary>
        /// An indication of the status of the license.
        /// </summary>
        /// <value>An indication of the status of the license.</value>
        [DataMember(Name="licenseStatusDescriptor", EmitDefaultValue=false)]
        public string LicenseStatusDescriptor { get; set; }

        /// <summary>
        /// An indication of the category of the license.
        /// </summary>
        /// <value>An indication of the category of the license.</value>
        [DataMember(Name="licenseTypeDescriptor", EmitDefaultValue=false)]
        public string LicenseTypeDescriptor { get; set; }

        /// <summary>
        /// The oldest age of children a provider is authorized or licensed to serve.
        /// </summary>
        /// <value>The oldest age of children a provider is authorized or licensed to serve.</value>
        [DataMember(Name="oldestAgeAuthorizedToServe", EmitDefaultValue=false)]
        public int? OldestAgeAuthorizedToServe { get; set; }

        /// <summary>
        /// The youngest age of children a provider is authorized or licensed to serve.
        /// </summary>
        /// <value>The youngest age of children a provider is authorized or licensed to serve.</value>
        [DataMember(Name="youngestAgeAuthorizedToServe", EmitDefaultValue=false)]
        public int? YoungestAgeAuthorizedToServe { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiCommunityProviderLicense {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LicenseIdentifier: ").Append(LicenseIdentifier).Append("\n");
            sb.Append("  LicensingOrganization: ").Append(LicensingOrganization).Append("\n");
            sb.Append("  CommunityProviderReference: ").Append(CommunityProviderReference).Append("\n");
            sb.Append("  AuthorizedFacilityCapacity: ").Append(AuthorizedFacilityCapacity).Append("\n");
            sb.Append("  LicenseEffectiveDate: ").Append(LicenseEffectiveDate).Append("\n");
            sb.Append("  LicenseExpirationDate: ").Append(LicenseExpirationDate).Append("\n");
            sb.Append("  LicenseIssueDate: ").Append(LicenseIssueDate).Append("\n");
            sb.Append("  LicenseStatusDescriptor: ").Append(LicenseStatusDescriptor).Append("\n");
            sb.Append("  LicenseTypeDescriptor: ").Append(LicenseTypeDescriptor).Append("\n");
            sb.Append("  OldestAgeAuthorizedToServe: ").Append(OldestAgeAuthorizedToServe).Append("\n");
            sb.Append("  YoungestAgeAuthorizedToServe: ").Append(YoungestAgeAuthorizedToServe).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiCommunityProviderLicense);
        }

        /// <summary>
        /// Returns true if EdFiCommunityProviderLicense instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiCommunityProviderLicense to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiCommunityProviderLicense input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LicenseIdentifier == input.LicenseIdentifier ||
                    (this.LicenseIdentifier != null &&
                    this.LicenseIdentifier.Equals(input.LicenseIdentifier))
                ) && 
                (
                    this.LicensingOrganization == input.LicensingOrganization ||
                    (this.LicensingOrganization != null &&
                    this.LicensingOrganization.Equals(input.LicensingOrganization))
                ) && 
                (
                    this.CommunityProviderReference == input.CommunityProviderReference ||
                    (this.CommunityProviderReference != null &&
                    this.CommunityProviderReference.Equals(input.CommunityProviderReference))
                ) && 
                (
                    this.AuthorizedFacilityCapacity == input.AuthorizedFacilityCapacity ||
                    (this.AuthorizedFacilityCapacity != null &&
                    this.AuthorizedFacilityCapacity.Equals(input.AuthorizedFacilityCapacity))
                ) && 
                (
                    this.LicenseEffectiveDate == input.LicenseEffectiveDate ||
                    (this.LicenseEffectiveDate != null &&
                    this.LicenseEffectiveDate.Equals(input.LicenseEffectiveDate))
                ) && 
                (
                    this.LicenseExpirationDate == input.LicenseExpirationDate ||
                    (this.LicenseExpirationDate != null &&
                    this.LicenseExpirationDate.Equals(input.LicenseExpirationDate))
                ) && 
                (
                    this.LicenseIssueDate == input.LicenseIssueDate ||
                    (this.LicenseIssueDate != null &&
                    this.LicenseIssueDate.Equals(input.LicenseIssueDate))
                ) && 
                (
                    this.LicenseStatusDescriptor == input.LicenseStatusDescriptor ||
                    (this.LicenseStatusDescriptor != null &&
                    this.LicenseStatusDescriptor.Equals(input.LicenseStatusDescriptor))
                ) && 
                (
                    this.LicenseTypeDescriptor == input.LicenseTypeDescriptor ||
                    (this.LicenseTypeDescriptor != null &&
                    this.LicenseTypeDescriptor.Equals(input.LicenseTypeDescriptor))
                ) && 
                (
                    this.OldestAgeAuthorizedToServe == input.OldestAgeAuthorizedToServe ||
                    (this.OldestAgeAuthorizedToServe != null &&
                    this.OldestAgeAuthorizedToServe.Equals(input.OldestAgeAuthorizedToServe))
                ) && 
                (
                    this.YoungestAgeAuthorizedToServe == input.YoungestAgeAuthorizedToServe ||
                    (this.YoungestAgeAuthorizedToServe != null &&
                    this.YoungestAgeAuthorizedToServe.Equals(input.YoungestAgeAuthorizedToServe))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LicenseIdentifier != null)
                    hashCode = hashCode * 59 + this.LicenseIdentifier.GetHashCode();
                if (this.LicensingOrganization != null)
                    hashCode = hashCode * 59 + this.LicensingOrganization.GetHashCode();
                if (this.CommunityProviderReference != null)
                    hashCode = hashCode * 59 + this.CommunityProviderReference.GetHashCode();
                if (this.AuthorizedFacilityCapacity != null)
                    hashCode = hashCode * 59 + this.AuthorizedFacilityCapacity.GetHashCode();
                if (this.LicenseEffectiveDate != null)
                    hashCode = hashCode * 59 + this.LicenseEffectiveDate.GetHashCode();
                if (this.LicenseExpirationDate != null)
                    hashCode = hashCode * 59 + this.LicenseExpirationDate.GetHashCode();
                if (this.LicenseIssueDate != null)
                    hashCode = hashCode * 59 + this.LicenseIssueDate.GetHashCode();
                if (this.LicenseStatusDescriptor != null)
                    hashCode = hashCode * 59 + this.LicenseStatusDescriptor.GetHashCode();
                if (this.LicenseTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.LicenseTypeDescriptor.GetHashCode();
                if (this.OldestAgeAuthorizedToServe != null)
                    hashCode = hashCode * 59 + this.OldestAgeAuthorizedToServe.GetHashCode();
                if (this.YoungestAgeAuthorizedToServe != null)
                    hashCode = hashCode * 59 + this.YoungestAgeAuthorizedToServe.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LicenseIdentifier (string) maxLength
            if(this.LicenseIdentifier != null && this.LicenseIdentifier.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LicenseIdentifier, length must be less than 20.", new [] { "LicenseIdentifier" });
            }

            // LicensingOrganization (string) maxLength
            if(this.LicensingOrganization != null && this.LicensingOrganization.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LicensingOrganization, length must be less than 75.", new [] { "LicensingOrganization" });
            }

            // LicenseStatusDescriptor (string) maxLength
            if(this.LicenseStatusDescriptor != null && this.LicenseStatusDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LicenseStatusDescriptor, length must be less than 306.", new [] { "LicenseStatusDescriptor" });
            }

            // LicenseTypeDescriptor (string) maxLength
            if(this.LicenseTypeDescriptor != null && this.LicenseTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LicenseTypeDescriptor, length must be less than 306.", new [] { "LicenseTypeDescriptor" });
            }

            yield break;
        }
    }

}
