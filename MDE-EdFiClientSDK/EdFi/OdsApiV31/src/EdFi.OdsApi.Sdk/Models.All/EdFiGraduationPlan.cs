/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiGraduationPlan
    /// </summary>
    [DataContract]
    public partial class EdFiGraduationPlan :  IEquatable<EdFiGraduationPlan>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGraduationPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGraduationPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGraduationPlan" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="GraduationPlanTypeDescriptor">The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard. (required).</param>
        /// <param name="EducationOrganizationReference">EducationOrganizationReference (required).</param>
        /// <param name="GraduationSchoolYearTypeReference">GraduationSchoolYearTypeReference (required).</param>
        /// <param name="CreditsByCourses">An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses..</param>
        /// <param name="CreditsBySubjects">An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements..</param>
        /// <param name="IndividualPlan">An indicator of whether the GraduationPlan is tailored for an individual..</param>
        /// <param name="RequiredAssessments">An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements..</param>
        /// <param name="TotalRequiredCreditConversion">Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units..</param>
        /// <param name="TotalRequiredCredits">The value of credits or units of value awarded for the completion of a course. (required).</param>
        /// <param name="TotalRequiredCreditTypeDescriptor">The type of credits or units of value awarded for the completion of a course..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiGraduationPlan(string Id = default(string), string GraduationPlanTypeDescriptor = default(string), EdFiEducationOrganizationReference EducationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiSchoolYearTypeReference GraduationSchoolYearTypeReference = default(EdFiSchoolYearTypeReference), List<EdFiGraduationPlanCreditsByCourse> CreditsByCourses = default(List<EdFiGraduationPlanCreditsByCourse>), List<EdFiGraduationPlanCreditsBySubject> CreditsBySubjects = default(List<EdFiGraduationPlanCreditsBySubject>), bool? IndividualPlan = default(bool?), List<EdFiGraduationPlanRequiredAssessment> RequiredAssessments = default(List<EdFiGraduationPlanRequiredAssessment>), double? TotalRequiredCreditConversion = default(double?), double? TotalRequiredCredits = default(double?), string TotalRequiredCreditTypeDescriptor = default(string), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiGraduationPlan and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "GraduationPlanTypeDescriptor" is required (not null)
            if (GraduationPlanTypeDescriptor == null)
            {
                throw new InvalidDataException("GraduationPlanTypeDescriptor is a required property for EdFiGraduationPlan and cannot be null");
            }
            else
            {
                this.GraduationPlanTypeDescriptor = GraduationPlanTypeDescriptor;
            }
            // to ensure "EducationOrganizationReference" is required (not null)
            if (EducationOrganizationReference == null)
            {
                throw new InvalidDataException("EducationOrganizationReference is a required property for EdFiGraduationPlan and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = EducationOrganizationReference;
            }
            // to ensure "GraduationSchoolYearTypeReference" is required (not null)
            if (GraduationSchoolYearTypeReference == null)
            {
                throw new InvalidDataException("GraduationSchoolYearTypeReference is a required property for EdFiGraduationPlan and cannot be null");
            }
            else
            {
                this.GraduationSchoolYearTypeReference = GraduationSchoolYearTypeReference;
            }
            // to ensure "TotalRequiredCredits" is required (not null)
            if (TotalRequiredCredits == null)
            {
                throw new InvalidDataException("TotalRequiredCredits is a required property for EdFiGraduationPlan and cannot be null");
            }
            else
            {
                this.TotalRequiredCredits = TotalRequiredCredits;
            }
            this.CreditsByCourses = CreditsByCourses;
            this.CreditsBySubjects = CreditsBySubjects;
            this.IndividualPlan = IndividualPlan;
            this.RequiredAssessments = RequiredAssessments;
            this.TotalRequiredCreditConversion = TotalRequiredCreditConversion;
            this.TotalRequiredCreditTypeDescriptor = TotalRequiredCreditTypeDescriptor;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.
        /// </summary>
        /// <value>The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.</value>
        [DataMember(Name="graduationPlanTypeDescriptor", EmitDefaultValue=false)]
        public string GraduationPlanTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets GraduationSchoolYearTypeReference
        /// </summary>
        [DataMember(Name="graduationSchoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference GraduationSchoolYearTypeReference { get; set; }

        /// <summary>
        /// An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.
        /// </summary>
        /// <value>An unordered collection of graduationPlanCreditsByCourses. The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.</value>
        [DataMember(Name="creditsByCourses", EmitDefaultValue=false)]
        public List<EdFiGraduationPlanCreditsByCourse> CreditsByCourses { get; set; }

        /// <summary>
        /// An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.
        /// </summary>
        /// <value>An unordered collection of graduationPlanCreditsBySubjects. The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.</value>
        [DataMember(Name="creditsBySubjects", EmitDefaultValue=false)]
        public List<EdFiGraduationPlanCreditsBySubject> CreditsBySubjects { get; set; }

        /// <summary>
        /// An indicator of whether the GraduationPlan is tailored for an individual.
        /// </summary>
        /// <value>An indicator of whether the GraduationPlan is tailored for an individual.</value>
        [DataMember(Name="individualPlan", EmitDefaultValue=false)]
        public bool? IndividualPlan { get; set; }

        /// <summary>
        /// An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements.
        /// </summary>
        /// <value>An unordered collection of graduationPlanRequiredAssessments. The assessments and associated required score and performance level needed to satisfy graduation requirements.</value>
        [DataMember(Name="requiredAssessments", EmitDefaultValue=false)]
        public List<EdFiGraduationPlanRequiredAssessment> RequiredAssessments { get; set; }

        /// <summary>
        /// Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.
        /// </summary>
        /// <value>Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.</value>
        [DataMember(Name="totalRequiredCreditConversion", EmitDefaultValue=false)]
        public double? TotalRequiredCreditConversion { get; set; }

        /// <summary>
        /// The value of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The value of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="totalRequiredCredits", EmitDefaultValue=false)]
        public double? TotalRequiredCredits { get; set; }

        /// <summary>
        /// The type of credits or units of value awarded for the completion of a course.
        /// </summary>
        /// <value>The type of credits or units of value awarded for the completion of a course.</value>
        [DataMember(Name="totalRequiredCreditTypeDescriptor", EmitDefaultValue=false)]
        public string TotalRequiredCreditTypeDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiGraduationPlan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GraduationPlanTypeDescriptor: ").Append(GraduationPlanTypeDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  GraduationSchoolYearTypeReference: ").Append(GraduationSchoolYearTypeReference).Append("\n");
            sb.Append("  CreditsByCourses: ").Append(CreditsByCourses).Append("\n");
            sb.Append("  CreditsBySubjects: ").Append(CreditsBySubjects).Append("\n");
            sb.Append("  IndividualPlan: ").Append(IndividualPlan).Append("\n");
            sb.Append("  RequiredAssessments: ").Append(RequiredAssessments).Append("\n");
            sb.Append("  TotalRequiredCreditConversion: ").Append(TotalRequiredCreditConversion).Append("\n");
            sb.Append("  TotalRequiredCredits: ").Append(TotalRequiredCredits).Append("\n");
            sb.Append("  TotalRequiredCreditTypeDescriptor: ").Append(TotalRequiredCreditTypeDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiGraduationPlan);
        }

        /// <summary>
        /// Returns true if EdFiGraduationPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiGraduationPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiGraduationPlan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GraduationPlanTypeDescriptor == input.GraduationPlanTypeDescriptor ||
                    (this.GraduationPlanTypeDescriptor != null &&
                    this.GraduationPlanTypeDescriptor.Equals(input.GraduationPlanTypeDescriptor))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.GraduationSchoolYearTypeReference == input.GraduationSchoolYearTypeReference ||
                    (this.GraduationSchoolYearTypeReference != null &&
                    this.GraduationSchoolYearTypeReference.Equals(input.GraduationSchoolYearTypeReference))
                ) && 
                (
                    this.CreditsByCourses == input.CreditsByCourses ||
                    this.CreditsByCourses != null &&
                    this.CreditsByCourses.SequenceEqual(input.CreditsByCourses)
                ) && 
                (
                    this.CreditsBySubjects == input.CreditsBySubjects ||
                    this.CreditsBySubjects != null &&
                    this.CreditsBySubjects.SequenceEqual(input.CreditsBySubjects)
                ) && 
                (
                    this.IndividualPlan == input.IndividualPlan ||
                    (this.IndividualPlan != null &&
                    this.IndividualPlan.Equals(input.IndividualPlan))
                ) && 
                (
                    this.RequiredAssessments == input.RequiredAssessments ||
                    this.RequiredAssessments != null &&
                    this.RequiredAssessments.SequenceEqual(input.RequiredAssessments)
                ) && 
                (
                    this.TotalRequiredCreditConversion == input.TotalRequiredCreditConversion ||
                    (this.TotalRequiredCreditConversion != null &&
                    this.TotalRequiredCreditConversion.Equals(input.TotalRequiredCreditConversion))
                ) && 
                (
                    this.TotalRequiredCredits == input.TotalRequiredCredits ||
                    (this.TotalRequiredCredits != null &&
                    this.TotalRequiredCredits.Equals(input.TotalRequiredCredits))
                ) && 
                (
                    this.TotalRequiredCreditTypeDescriptor == input.TotalRequiredCreditTypeDescriptor ||
                    (this.TotalRequiredCreditTypeDescriptor != null &&
                    this.TotalRequiredCreditTypeDescriptor.Equals(input.TotalRequiredCreditTypeDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.GraduationPlanTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.GraduationPlanTypeDescriptor.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.GraduationSchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.GraduationSchoolYearTypeReference.GetHashCode();
                if (this.CreditsByCourses != null)
                    hashCode = hashCode * 59 + this.CreditsByCourses.GetHashCode();
                if (this.CreditsBySubjects != null)
                    hashCode = hashCode * 59 + this.CreditsBySubjects.GetHashCode();
                if (this.IndividualPlan != null)
                    hashCode = hashCode * 59 + this.IndividualPlan.GetHashCode();
                if (this.RequiredAssessments != null)
                    hashCode = hashCode * 59 + this.RequiredAssessments.GetHashCode();
                if (this.TotalRequiredCreditConversion != null)
                    hashCode = hashCode * 59 + this.TotalRequiredCreditConversion.GetHashCode();
                if (this.TotalRequiredCredits != null)
                    hashCode = hashCode * 59 + this.TotalRequiredCredits.GetHashCode();
                if (this.TotalRequiredCreditTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.TotalRequiredCreditTypeDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GraduationPlanTypeDescriptor (string) maxLength
            if(this.GraduationPlanTypeDescriptor != null && this.GraduationPlanTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GraduationPlanTypeDescriptor, length must be less than 306.", new [] { "GraduationPlanTypeDescriptor" });
            }

            // TotalRequiredCreditTypeDescriptor (string) maxLength
            if(this.TotalRequiredCreditTypeDescriptor != null && this.TotalRequiredCreditTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalRequiredCreditTypeDescriptor, length must be less than 306.", new [] { "TotalRequiredCreditTypeDescriptor" });
            }

            yield break;
        }
    }

}
