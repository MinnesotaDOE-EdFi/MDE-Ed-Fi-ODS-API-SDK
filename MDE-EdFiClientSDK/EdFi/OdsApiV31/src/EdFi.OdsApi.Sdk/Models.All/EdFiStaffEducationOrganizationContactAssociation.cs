/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiStaffEducationOrganizationContactAssociation
    /// </summary>
    [DataContract]
    public partial class EdFiStaffEducationOrganizationContactAssociation :  IEquatable<EdFiStaffEducationOrganizationContactAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationContactAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffEducationOrganizationContactAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationContactAssociation" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="ContactTitle">The title of the contact in the context of the EducationOrganization. (required).</param>
        /// <param name="EducationOrganizationReference">EducationOrganizationReference (required).</param>
        /// <param name="StaffReference">StaffReference (required).</param>
        /// <param name="Address">Address.</param>
        /// <param name="ContactTypeDescriptor">Indicates the type for the contact information..</param>
        /// <param name="ElectronicMailAddress">The email for the contact associated with the EducationOrganization. (required).</param>
        /// <param name="Telephones">An unordered collection of staffEducationOrganizationContactAssociationTelephones. The optional telephone for the contact associated with the EducationOrganization..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiStaffEducationOrganizationContactAssociation(string Id = default(string), string ContactTitle = default(string), EdFiEducationOrganizationReference EducationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiStaffReference StaffReference = default(EdFiStaffReference), EdFiStaffEducationOrganizationContactAssociationAddress Address = default(EdFiStaffEducationOrganizationContactAssociationAddress), string ContactTypeDescriptor = default(string), string ElectronicMailAddress = default(string), List<EdFiStaffEducationOrganizationContactAssociationTelephone> Telephones = default(List<EdFiStaffEducationOrganizationContactAssociationTelephone>), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiStaffEducationOrganizationContactAssociation and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "ContactTitle" is required (not null)
            if (ContactTitle == null)
            {
                throw new InvalidDataException("ContactTitle is a required property for EdFiStaffEducationOrganizationContactAssociation and cannot be null");
            }
            else
            {
                this.ContactTitle = ContactTitle;
            }
            // to ensure "EducationOrganizationReference" is required (not null)
            if (EducationOrganizationReference == null)
            {
                throw new InvalidDataException("EducationOrganizationReference is a required property for EdFiStaffEducationOrganizationContactAssociation and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = EducationOrganizationReference;
            }
            // to ensure "StaffReference" is required (not null)
            if (StaffReference == null)
            {
                throw new InvalidDataException("StaffReference is a required property for EdFiStaffEducationOrganizationContactAssociation and cannot be null");
            }
            else
            {
                this.StaffReference = StaffReference;
            }
            // to ensure "ElectronicMailAddress" is required (not null)
            if (ElectronicMailAddress == null)
            {
                throw new InvalidDataException("ElectronicMailAddress is a required property for EdFiStaffEducationOrganizationContactAssociation and cannot be null");
            }
            else
            {
                this.ElectronicMailAddress = ElectronicMailAddress;
            }
            this.Address = Address;
            this.ContactTypeDescriptor = ContactTypeDescriptor;
            this.Telephones = Telephones;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The title of the contact in the context of the EducationOrganization.
        /// </summary>
        /// <value>The title of the contact in the context of the EducationOrganization.</value>
        [DataMember(Name="contactTitle", EmitDefaultValue=false)]
        public string ContactTitle { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name="staffReference", EmitDefaultValue=false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public EdFiStaffEducationOrganizationContactAssociationAddress Address { get; set; }

        /// <summary>
        /// Indicates the type for the contact information.
        /// </summary>
        /// <value>Indicates the type for the contact information.</value>
        [DataMember(Name="contactTypeDescriptor", EmitDefaultValue=false)]
        public string ContactTypeDescriptor { get; set; }

        /// <summary>
        /// The email for the contact associated with the EducationOrganization.
        /// </summary>
        /// <value>The email for the contact associated with the EducationOrganization.</value>
        [DataMember(Name="electronicMailAddress", EmitDefaultValue=false)]
        public string ElectronicMailAddress { get; set; }

        /// <summary>
        /// An unordered collection of staffEducationOrganizationContactAssociationTelephones. The optional telephone for the contact associated with the EducationOrganization.
        /// </summary>
        /// <value>An unordered collection of staffEducationOrganizationContactAssociationTelephones. The optional telephone for the contact associated with the EducationOrganization.</value>
        [DataMember(Name="telephones", EmitDefaultValue=false)]
        public List<EdFiStaffEducationOrganizationContactAssociationTelephone> Telephones { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStaffEducationOrganizationContactAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContactTitle: ").Append(ContactTitle).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ContactTypeDescriptor: ").Append(ContactTypeDescriptor).Append("\n");
            sb.Append("  ElectronicMailAddress: ").Append(ElectronicMailAddress).Append("\n");
            sb.Append("  Telephones: ").Append(Telephones).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStaffEducationOrganizationContactAssociation);
        }

        /// <summary>
        /// Returns true if EdFiStaffEducationOrganizationContactAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStaffEducationOrganizationContactAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStaffEducationOrganizationContactAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ContactTitle == input.ContactTitle ||
                    (this.ContactTitle != null &&
                    this.ContactTitle.Equals(input.ContactTitle))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ContactTypeDescriptor == input.ContactTypeDescriptor ||
                    (this.ContactTypeDescriptor != null &&
                    this.ContactTypeDescriptor.Equals(input.ContactTypeDescriptor))
                ) && 
                (
                    this.ElectronicMailAddress == input.ElectronicMailAddress ||
                    (this.ElectronicMailAddress != null &&
                    this.ElectronicMailAddress.Equals(input.ElectronicMailAddress))
                ) && 
                (
                    this.Telephones == input.Telephones ||
                    this.Telephones != null &&
                    this.Telephones.SequenceEqual(input.Telephones)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ContactTitle != null)
                    hashCode = hashCode * 59 + this.ContactTitle.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.ContactTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.ContactTypeDescriptor.GetHashCode();
                if (this.ElectronicMailAddress != null)
                    hashCode = hashCode * 59 + this.ElectronicMailAddress.GetHashCode();
                if (this.Telephones != null)
                    hashCode = hashCode * 59 + this.Telephones.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContactTitle (string) maxLength
            if(this.ContactTitle != null && this.ContactTitle.Length > 75)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactTitle, length must be less than 75.", new [] { "ContactTitle" });
            }

            // ContactTypeDescriptor (string) maxLength
            if(this.ContactTypeDescriptor != null && this.ContactTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactTypeDescriptor, length must be less than 306.", new [] { "ContactTypeDescriptor" });
            }

            // ElectronicMailAddress (string) maxLength
            if(this.ElectronicMailAddress != null && this.ElectronicMailAddress.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ElectronicMailAddress, length must be less than 128.", new [] { "ElectronicMailAddress" });
            }

            yield break;
        }
    }

}
