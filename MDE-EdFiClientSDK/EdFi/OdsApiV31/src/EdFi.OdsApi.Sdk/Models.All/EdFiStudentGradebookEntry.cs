/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiStudentGradebookEntry
    /// </summary>
    [DataContract]
    public partial class EdFiStudentGradebookEntry :  IEquatable<EdFiStudentGradebookEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentGradebookEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStudentGradebookEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStudentGradebookEntry" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="GradebookEntryReference">GradebookEntryReference (required).</param>
        /// <param name="StudentSectionAssociationReference">StudentSectionAssociationReference (required).</param>
        /// <param name="CompetencyLevelDescriptor">The CompetencyLevel assessed for the student for the referenced LearningObjective..</param>
        /// <param name="DateFulfilled">The date an assignment was turned in or the date of an assessment..</param>
        /// <param name="DiagnosticStatement">A statement provided by the teacher that provides information in addition to the grade or assessment score..</param>
        /// <param name="LetterGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="NumericGradeEarned">A final or interim (grading period) indicator of student performance in a class as submitted by the instructor..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiStudentGradebookEntry(string Id = default(string), EdFiGradebookEntryReference GradebookEntryReference = default(EdFiGradebookEntryReference), EdFiStudentSectionAssociationReference StudentSectionAssociationReference = default(EdFiStudentSectionAssociationReference), string CompetencyLevelDescriptor = default(string), DateTime? DateFulfilled = default(DateTime?), string DiagnosticStatement = default(string), string LetterGradeEarned = default(string), double? NumericGradeEarned = default(double?), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiStudentGradebookEntry and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "GradebookEntryReference" is required (not null)
            if (GradebookEntryReference == null)
            {
                throw new InvalidDataException("GradebookEntryReference is a required property for EdFiStudentGradebookEntry and cannot be null");
            }
            else
            {
                this.GradebookEntryReference = GradebookEntryReference;
            }
            // to ensure "StudentSectionAssociationReference" is required (not null)
            if (StudentSectionAssociationReference == null)
            {
                throw new InvalidDataException("StudentSectionAssociationReference is a required property for EdFiStudentGradebookEntry and cannot be null");
            }
            else
            {
                this.StudentSectionAssociationReference = StudentSectionAssociationReference;
            }
            this.CompetencyLevelDescriptor = CompetencyLevelDescriptor;
            this.DateFulfilled = DateFulfilled;
            this.DiagnosticStatement = DiagnosticStatement;
            this.LetterGradeEarned = LetterGradeEarned;
            this.NumericGradeEarned = NumericGradeEarned;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets GradebookEntryReference
        /// </summary>
        [DataMember(Name="gradebookEntryReference", EmitDefaultValue=false)]
        public EdFiGradebookEntryReference GradebookEntryReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentSectionAssociationReference
        /// </summary>
        [DataMember(Name="studentSectionAssociationReference", EmitDefaultValue=false)]
        public EdFiStudentSectionAssociationReference StudentSectionAssociationReference { get; set; }

        /// <summary>
        /// The CompetencyLevel assessed for the student for the referenced LearningObjective.
        /// </summary>
        /// <value>The CompetencyLevel assessed for the student for the referenced LearningObjective.</value>
        [DataMember(Name="competencyLevelDescriptor", EmitDefaultValue=false)]
        public string CompetencyLevelDescriptor { get; set; }

        /// <summary>
        /// The date an assignment was turned in or the date of an assessment.
        /// </summary>
        /// <value>The date an assignment was turned in or the date of an assessment.</value>
        [DataMember(Name="dateFulfilled", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateFulfilled { get; set; }

        /// <summary>
        /// A statement provided by the teacher that provides information in addition to the grade or assessment score.
        /// </summary>
        /// <value>A statement provided by the teacher that provides information in addition to the grade or assessment score.</value>
        [DataMember(Name="diagnosticStatement", EmitDefaultValue=false)]
        public string DiagnosticStatement { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name="letterGradeEarned", EmitDefaultValue=false)]
        public string LetterGradeEarned { get; set; }

        /// <summary>
        /// A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.
        /// </summary>
        /// <value>A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.</value>
        [DataMember(Name="numericGradeEarned", EmitDefaultValue=false)]
        public double? NumericGradeEarned { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStudentGradebookEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GradebookEntryReference: ").Append(GradebookEntryReference).Append("\n");
            sb.Append("  StudentSectionAssociationReference: ").Append(StudentSectionAssociationReference).Append("\n");
            sb.Append("  CompetencyLevelDescriptor: ").Append(CompetencyLevelDescriptor).Append("\n");
            sb.Append("  DateFulfilled: ").Append(DateFulfilled).Append("\n");
            sb.Append("  DiagnosticStatement: ").Append(DiagnosticStatement).Append("\n");
            sb.Append("  LetterGradeEarned: ").Append(LetterGradeEarned).Append("\n");
            sb.Append("  NumericGradeEarned: ").Append(NumericGradeEarned).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStudentGradebookEntry);
        }

        /// <summary>
        /// Returns true if EdFiStudentGradebookEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStudentGradebookEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStudentGradebookEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GradebookEntryReference == input.GradebookEntryReference ||
                    (this.GradebookEntryReference != null &&
                    this.GradebookEntryReference.Equals(input.GradebookEntryReference))
                ) && 
                (
                    this.StudentSectionAssociationReference == input.StudentSectionAssociationReference ||
                    (this.StudentSectionAssociationReference != null &&
                    this.StudentSectionAssociationReference.Equals(input.StudentSectionAssociationReference))
                ) && 
                (
                    this.CompetencyLevelDescriptor == input.CompetencyLevelDescriptor ||
                    (this.CompetencyLevelDescriptor != null &&
                    this.CompetencyLevelDescriptor.Equals(input.CompetencyLevelDescriptor))
                ) && 
                (
                    this.DateFulfilled == input.DateFulfilled ||
                    (this.DateFulfilled != null &&
                    this.DateFulfilled.Equals(input.DateFulfilled))
                ) && 
                (
                    this.DiagnosticStatement == input.DiagnosticStatement ||
                    (this.DiagnosticStatement != null &&
                    this.DiagnosticStatement.Equals(input.DiagnosticStatement))
                ) && 
                (
                    this.LetterGradeEarned == input.LetterGradeEarned ||
                    (this.LetterGradeEarned != null &&
                    this.LetterGradeEarned.Equals(input.LetterGradeEarned))
                ) && 
                (
                    this.NumericGradeEarned == input.NumericGradeEarned ||
                    (this.NumericGradeEarned != null &&
                    this.NumericGradeEarned.Equals(input.NumericGradeEarned))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.GradebookEntryReference != null)
                    hashCode = hashCode * 59 + this.GradebookEntryReference.GetHashCode();
                if (this.StudentSectionAssociationReference != null)
                    hashCode = hashCode * 59 + this.StudentSectionAssociationReference.GetHashCode();
                if (this.CompetencyLevelDescriptor != null)
                    hashCode = hashCode * 59 + this.CompetencyLevelDescriptor.GetHashCode();
                if (this.DateFulfilled != null)
                    hashCode = hashCode * 59 + this.DateFulfilled.GetHashCode();
                if (this.DiagnosticStatement != null)
                    hashCode = hashCode * 59 + this.DiagnosticStatement.GetHashCode();
                if (this.LetterGradeEarned != null)
                    hashCode = hashCode * 59 + this.LetterGradeEarned.GetHashCode();
                if (this.NumericGradeEarned != null)
                    hashCode = hashCode * 59 + this.NumericGradeEarned.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CompetencyLevelDescriptor (string) maxLength
            if(this.CompetencyLevelDescriptor != null && this.CompetencyLevelDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompetencyLevelDescriptor, length must be less than 306.", new [] { "CompetencyLevelDescriptor" });
            }

            // DiagnosticStatement (string) maxLength
            if(this.DiagnosticStatement != null && this.DiagnosticStatement.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiagnosticStatement, length must be less than 1024.", new [] { "DiagnosticStatement" });
            }

            // LetterGradeEarned (string) maxLength
            if(this.LetterGradeEarned != null && this.LetterGradeEarned.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LetterGradeEarned, length must be less than 20.", new [] { "LetterGradeEarned" });
            }

            yield break;
        }
    }

}
