/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiGradebookEntry
    /// </summary>
    [DataContract]
    public partial class EdFiGradebookEntry :  IEquatable<EdFiGradebookEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradebookEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiGradebookEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiGradebookEntry" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="DateAssigned">The date the assignment, homework, or assessment was assigned or executed. (required).</param>
        /// <param name="GradebookEntryTitle">The name or title of the activity to be recorded in the GradebookEntry. (required).</param>
        /// <param name="GradingPeriodReference">GradingPeriodReference.</param>
        /// <param name="SectionReference">SectionReference (required).</param>
        /// <param name="Description">A description of the assignment, homework, or classroom assessment..</param>
        /// <param name="GradebookEntryTypeDescriptor">The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc..</param>
        /// <param name="LearningObjectives">An unordered collection of gradebookEntryLearningObjectives. LearningObjectives associated with the GradebookEntry..</param>
        /// <param name="LearningStandards">An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the GradebookEntry..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiGradebookEntry(string Id = default(string), DateTime? DateAssigned = default(DateTime?), string GradebookEntryTitle = default(string), EdFiGradingPeriodReference GradingPeriodReference = default(EdFiGradingPeriodReference), EdFiSectionReference SectionReference = default(EdFiSectionReference), string Description = default(string), string GradebookEntryTypeDescriptor = default(string), List<EdFiGradebookEntryLearningObjective> LearningObjectives = default(List<EdFiGradebookEntryLearningObjective>), List<EdFiGradebookEntryLearningStandard> LearningStandards = default(List<EdFiGradebookEntryLearningStandard>), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiGradebookEntry and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "DateAssigned" is required (not null)
            if (DateAssigned == null)
            {
                throw new InvalidDataException("DateAssigned is a required property for EdFiGradebookEntry and cannot be null");
            }
            else
            {
                this.DateAssigned = DateAssigned;
            }
            // to ensure "GradebookEntryTitle" is required (not null)
            if (GradebookEntryTitle == null)
            {
                throw new InvalidDataException("GradebookEntryTitle is a required property for EdFiGradebookEntry and cannot be null");
            }
            else
            {
                this.GradebookEntryTitle = GradebookEntryTitle;
            }
            // to ensure "SectionReference" is required (not null)
            if (SectionReference == null)
            {
                throw new InvalidDataException("SectionReference is a required property for EdFiGradebookEntry and cannot be null");
            }
            else
            {
                this.SectionReference = SectionReference;
            }
            this.GradingPeriodReference = GradingPeriodReference;
            this.Description = Description;
            this.GradebookEntryTypeDescriptor = GradebookEntryTypeDescriptor;
            this.LearningObjectives = LearningObjectives;
            this.LearningStandards = LearningStandards;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The date the assignment, homework, or assessment was assigned or executed.
        /// </summary>
        /// <value>The date the assignment, homework, or assessment was assigned or executed.</value>
        [DataMember(Name="dateAssigned", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateAssigned { get; set; }

        /// <summary>
        /// The name or title of the activity to be recorded in the GradebookEntry.
        /// </summary>
        /// <value>The name or title of the activity to be recorded in the GradebookEntry.</value>
        [DataMember(Name="gradebookEntryTitle", EmitDefaultValue=false)]
        public string GradebookEntryTitle { get; set; }

        /// <summary>
        /// Gets or Sets GradingPeriodReference
        /// </summary>
        [DataMember(Name="gradingPeriodReference", EmitDefaultValue=false)]
        public EdFiGradingPeriodReference GradingPeriodReference { get; set; }

        /// <summary>
        /// Gets or Sets SectionReference
        /// </summary>
        [DataMember(Name="sectionReference", EmitDefaultValue=false)]
        public EdFiSectionReference SectionReference { get; set; }

        /// <summary>
        /// A description of the assignment, homework, or classroom assessment.
        /// </summary>
        /// <value>A description of the assignment, homework, or classroom assessment.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc.
        /// </summary>
        /// <value>The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc.</value>
        [DataMember(Name="gradebookEntryTypeDescriptor", EmitDefaultValue=false)]
        public string GradebookEntryTypeDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of gradebookEntryLearningObjectives. LearningObjectives associated with the GradebookEntry.
        /// </summary>
        /// <value>An unordered collection of gradebookEntryLearningObjectives. LearningObjectives associated with the GradebookEntry.</value>
        [DataMember(Name="learningObjectives", EmitDefaultValue=false)]
        public List<EdFiGradebookEntryLearningObjective> LearningObjectives { get; set; }

        /// <summary>
        /// An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the GradebookEntry.
        /// </summary>
        /// <value>An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the GradebookEntry.</value>
        [DataMember(Name="learningStandards", EmitDefaultValue=false)]
        public List<EdFiGradebookEntryLearningStandard> LearningStandards { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiGradebookEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DateAssigned: ").Append(DateAssigned).Append("\n");
            sb.Append("  GradebookEntryTitle: ").Append(GradebookEntryTitle).Append("\n");
            sb.Append("  GradingPeriodReference: ").Append(GradingPeriodReference).Append("\n");
            sb.Append("  SectionReference: ").Append(SectionReference).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GradebookEntryTypeDescriptor: ").Append(GradebookEntryTypeDescriptor).Append("\n");
            sb.Append("  LearningObjectives: ").Append(LearningObjectives).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiGradebookEntry);
        }

        /// <summary>
        /// Returns true if EdFiGradebookEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiGradebookEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiGradebookEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DateAssigned == input.DateAssigned ||
                    (this.DateAssigned != null &&
                    this.DateAssigned.Equals(input.DateAssigned))
                ) && 
                (
                    this.GradebookEntryTitle == input.GradebookEntryTitle ||
                    (this.GradebookEntryTitle != null &&
                    this.GradebookEntryTitle.Equals(input.GradebookEntryTitle))
                ) && 
                (
                    this.GradingPeriodReference == input.GradingPeriodReference ||
                    (this.GradingPeriodReference != null &&
                    this.GradingPeriodReference.Equals(input.GradingPeriodReference))
                ) && 
                (
                    this.SectionReference == input.SectionReference ||
                    (this.SectionReference != null &&
                    this.SectionReference.Equals(input.SectionReference))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.GradebookEntryTypeDescriptor == input.GradebookEntryTypeDescriptor ||
                    (this.GradebookEntryTypeDescriptor != null &&
                    this.GradebookEntryTypeDescriptor.Equals(input.GradebookEntryTypeDescriptor))
                ) && 
                (
                    this.LearningObjectives == input.LearningObjectives ||
                    this.LearningObjectives != null &&
                    this.LearningObjectives.SequenceEqual(input.LearningObjectives)
                ) && 
                (
                    this.LearningStandards == input.LearningStandards ||
                    this.LearningStandards != null &&
                    this.LearningStandards.SequenceEqual(input.LearningStandards)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DateAssigned != null)
                    hashCode = hashCode * 59 + this.DateAssigned.GetHashCode();
                if (this.GradebookEntryTitle != null)
                    hashCode = hashCode * 59 + this.GradebookEntryTitle.GetHashCode();
                if (this.GradingPeriodReference != null)
                    hashCode = hashCode * 59 + this.GradingPeriodReference.GetHashCode();
                if (this.SectionReference != null)
                    hashCode = hashCode * 59 + this.SectionReference.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.GradebookEntryTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.GradebookEntryTypeDescriptor.GetHashCode();
                if (this.LearningObjectives != null)
                    hashCode = hashCode * 59 + this.LearningObjectives.GetHashCode();
                if (this.LearningStandards != null)
                    hashCode = hashCode * 59 + this.LearningStandards.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GradebookEntryTitle (string) maxLength
            if(this.GradebookEntryTitle != null && this.GradebookEntryTitle.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GradebookEntryTitle, length must be less than 60.", new [] { "GradebookEntryTitle" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // GradebookEntryTypeDescriptor (string) maxLength
            if(this.GradebookEntryTypeDescriptor != null && this.GradebookEntryTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GradebookEntryTypeDescriptor, length must be less than 306.", new [] { "GradebookEntryTypeDescriptor" });
            }

            yield break;
        }
    }

}
