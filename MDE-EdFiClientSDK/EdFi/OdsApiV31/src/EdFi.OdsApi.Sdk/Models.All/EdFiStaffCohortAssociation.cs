/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiStaffCohortAssociation
    /// </summary>
    [DataContract]
    public partial class EdFiStaffCohortAssociation :  IEquatable<EdFiStaffCohortAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffCohortAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffCohortAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffCohortAssociation" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="BeginDate">Start date for the association of staff to this cohort. (required).</param>
        /// <param name="CohortReference">CohortReference (required).</param>
        /// <param name="StaffReference">StaffReference (required).</param>
        /// <param name="EndDate">End date for the association of staff to this cohort..</param>
        /// <param name="StudentRecordAccess">Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiStaffCohortAssociation(string Id = default(string), DateTime? BeginDate = default(DateTime?), EdFiCohortReference CohortReference = default(EdFiCohortReference), EdFiStaffReference StaffReference = default(EdFiStaffReference), DateTime? EndDate = default(DateTime?), bool? StudentRecordAccess = default(bool?), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiStaffCohortAssociation and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "BeginDate" is required (not null)
            if (BeginDate == null)
            {
                throw new InvalidDataException("BeginDate is a required property for EdFiStaffCohortAssociation and cannot be null");
            }
            else
            {
                this.BeginDate = BeginDate;
            }
            // to ensure "CohortReference" is required (not null)
            if (CohortReference == null)
            {
                throw new InvalidDataException("CohortReference is a required property for EdFiStaffCohortAssociation and cannot be null");
            }
            else
            {
                this.CohortReference = CohortReference;
            }
            // to ensure "StaffReference" is required (not null)
            if (StaffReference == null)
            {
                throw new InvalidDataException("StaffReference is a required property for EdFiStaffCohortAssociation and cannot be null");
            }
            else
            {
                this.StaffReference = StaffReference;
            }
            this.EndDate = EndDate;
            this.StudentRecordAccess = StudentRecordAccess;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Start date for the association of staff to this cohort.
        /// </summary>
        /// <value>Start date for the association of staff to this cohort.</value>
        [DataMember(Name="beginDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// Gets or Sets CohortReference
        /// </summary>
        [DataMember(Name="cohortReference", EmitDefaultValue=false)]
        public EdFiCohortReference CohortReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name="staffReference", EmitDefaultValue=false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// End date for the association of staff to this cohort.
        /// </summary>
        /// <value>End date for the association of staff to this cohort.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies.
        /// </summary>
        /// <value>Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies.</value>
        [DataMember(Name="studentRecordAccess", EmitDefaultValue=false)]
        public bool? StudentRecordAccess { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStaffCohortAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  CohortReference: ").Append(CohortReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StudentRecordAccess: ").Append(StudentRecordAccess).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStaffCohortAssociation);
        }

        /// <summary>
        /// Returns true if EdFiStaffCohortAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStaffCohortAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStaffCohortAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.CohortReference == input.CohortReference ||
                    (this.CohortReference != null &&
                    this.CohortReference.Equals(input.CohortReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.StudentRecordAccess == input.StudentRecordAccess ||
                    (this.StudentRecordAccess != null &&
                    this.StudentRecordAccess.Equals(input.StudentRecordAccess))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BeginDate != null)
                    hashCode = hashCode * 59 + this.BeginDate.GetHashCode();
                if (this.CohortReference != null)
                    hashCode = hashCode * 59 + this.CohortReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.StudentRecordAccess != null)
                    hashCode = hashCode * 59 + this.StudentRecordAccess.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
