/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiStaffSchoolAssociation
    /// </summary>
    [DataContract]
    public partial class EdFiStaffSchoolAssociation :  IEquatable<EdFiStaffSchoolAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffSchoolAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffSchoolAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffSchoolAssociation" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="ProgramAssignmentDescriptor">The name of the program for which the individual is assigned; for example:          Regular education          Title I-Academic          Title I-Non-Academic          Special Education          Bilingual/English as a Second Language. (required).</param>
        /// <param name="CalendarReference">CalendarReference.</param>
        /// <param name="SchoolReference">SchoolReference (required).</param>
        /// <param name="SchoolYearTypeReference">SchoolYearTypeReference.</param>
        /// <param name="StaffReference">StaffReference (required).</param>
        /// <param name="AcademicSubjects">An unordered collection of staffSchoolAssociationAcademicSubjects. The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc..</param>
        /// <param name="GradeLevels">An unordered collection of staffSchoolAssociationGradeLevels. The set of grade levels for which the individual&#39;s assignment is responsible..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiStaffSchoolAssociation(string Id = default(string), string ProgramAssignmentDescriptor = default(string), EdFiCalendarReference CalendarReference = default(EdFiCalendarReference), EdFiSchoolReference SchoolReference = default(EdFiSchoolReference), EdFiSchoolYearTypeReference SchoolYearTypeReference = default(EdFiSchoolYearTypeReference), EdFiStaffReference StaffReference = default(EdFiStaffReference), List<EdFiStaffSchoolAssociationAcademicSubject> AcademicSubjects = default(List<EdFiStaffSchoolAssociationAcademicSubject>), List<EdFiStaffSchoolAssociationGradeLevel> GradeLevels = default(List<EdFiStaffSchoolAssociationGradeLevel>), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiStaffSchoolAssociation and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "ProgramAssignmentDescriptor" is required (not null)
            if (ProgramAssignmentDescriptor == null)
            {
                throw new InvalidDataException("ProgramAssignmentDescriptor is a required property for EdFiStaffSchoolAssociation and cannot be null");
            }
            else
            {
                this.ProgramAssignmentDescriptor = ProgramAssignmentDescriptor;
            }
            // to ensure "SchoolReference" is required (not null)
            if (SchoolReference == null)
            {
                throw new InvalidDataException("SchoolReference is a required property for EdFiStaffSchoolAssociation and cannot be null");
            }
            else
            {
                this.SchoolReference = SchoolReference;
            }
            // to ensure "StaffReference" is required (not null)
            if (StaffReference == null)
            {
                throw new InvalidDataException("StaffReference is a required property for EdFiStaffSchoolAssociation and cannot be null");
            }
            else
            {
                this.StaffReference = StaffReference;
            }
            this.CalendarReference = CalendarReference;
            this.SchoolYearTypeReference = SchoolYearTypeReference;
            this.AcademicSubjects = AcademicSubjects;
            this.GradeLevels = GradeLevels;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the program for which the individual is assigned; for example:          Regular education          Title I-Academic          Title I-Non-Academic          Special Education          Bilingual/English as a Second Language.
        /// </summary>
        /// <value>The name of the program for which the individual is assigned; for example:          Regular education          Title I-Academic          Title I-Non-Academic          Special Education          Bilingual/English as a Second Language.</value>
        [DataMember(Name="programAssignmentDescriptor", EmitDefaultValue=false)]
        public string ProgramAssignmentDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets CalendarReference
        /// </summary>
        [DataMember(Name="calendarReference", EmitDefaultValue=false)]
        public EdFiCalendarReference CalendarReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name="schoolReference", EmitDefaultValue=false)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets SchoolYearTypeReference
        /// </summary>
        [DataMember(Name="schoolYearTypeReference", EmitDefaultValue=false)]
        public EdFiSchoolYearTypeReference SchoolYearTypeReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name="staffReference", EmitDefaultValue=false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// An unordered collection of staffSchoolAssociationAcademicSubjects. The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.
        /// </summary>
        /// <value>An unordered collection of staffSchoolAssociationAcademicSubjects. The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.</value>
        [DataMember(Name="academicSubjects", EmitDefaultValue=false)]
        public List<EdFiStaffSchoolAssociationAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// An unordered collection of staffSchoolAssociationGradeLevels. The set of grade levels for which the individual&#39;s assignment is responsible.
        /// </summary>
        /// <value>An unordered collection of staffSchoolAssociationGradeLevels. The set of grade levels for which the individual&#39;s assignment is responsible.</value>
        [DataMember(Name="gradeLevels", EmitDefaultValue=false)]
        public List<EdFiStaffSchoolAssociationGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStaffSchoolAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramAssignmentDescriptor: ").Append(ProgramAssignmentDescriptor).Append("\n");
            sb.Append("  CalendarReference: ").Append(CalendarReference).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  SchoolYearTypeReference: ").Append(SchoolYearTypeReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStaffSchoolAssociation);
        }

        /// <summary>
        /// Returns true if EdFiStaffSchoolAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStaffSchoolAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStaffSchoolAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProgramAssignmentDescriptor == input.ProgramAssignmentDescriptor ||
                    (this.ProgramAssignmentDescriptor != null &&
                    this.ProgramAssignmentDescriptor.Equals(input.ProgramAssignmentDescriptor))
                ) && 
                (
                    this.CalendarReference == input.CalendarReference ||
                    (this.CalendarReference != null &&
                    this.CalendarReference.Equals(input.CalendarReference))
                ) && 
                (
                    this.SchoolReference == input.SchoolReference ||
                    (this.SchoolReference != null &&
                    this.SchoolReference.Equals(input.SchoolReference))
                ) && 
                (
                    this.SchoolYearTypeReference == input.SchoolYearTypeReference ||
                    (this.SchoolYearTypeReference != null &&
                    this.SchoolYearTypeReference.Equals(input.SchoolYearTypeReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.AcademicSubjects == input.AcademicSubjects ||
                    this.AcademicSubjects != null &&
                    this.AcademicSubjects.SequenceEqual(input.AcademicSubjects)
                ) && 
                (
                    this.GradeLevels == input.GradeLevels ||
                    this.GradeLevels != null &&
                    this.GradeLevels.SequenceEqual(input.GradeLevels)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProgramAssignmentDescriptor != null)
                    hashCode = hashCode * 59 + this.ProgramAssignmentDescriptor.GetHashCode();
                if (this.CalendarReference != null)
                    hashCode = hashCode * 59 + this.CalendarReference.GetHashCode();
                if (this.SchoolReference != null)
                    hashCode = hashCode * 59 + this.SchoolReference.GetHashCode();
                if (this.SchoolYearTypeReference != null)
                    hashCode = hashCode * 59 + this.SchoolYearTypeReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.AcademicSubjects != null)
                    hashCode = hashCode * 59 + this.AcademicSubjects.GetHashCode();
                if (this.GradeLevels != null)
                    hashCode = hashCode * 59 + this.GradeLevels.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramAssignmentDescriptor (string) maxLength
            if(this.ProgramAssignmentDescriptor != null && this.ProgramAssignmentDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramAssignmentDescriptor, length must be less than 306.", new [] { "ProgramAssignmentDescriptor" });
            }

            yield break;
        }
    }

}
