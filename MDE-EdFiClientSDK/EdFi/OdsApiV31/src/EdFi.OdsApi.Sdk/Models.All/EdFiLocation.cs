/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiLocation
    /// </summary>
    [DataContract]
    public partial class EdFiLocation :  IEquatable<EdFiLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiLocation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLocation" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="ClassroomIdentificationCode">A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity. (required).</param>
        /// <param name="SchoolReference">SchoolReference (required).</param>
        /// <param name="MaximumNumberOfSeats">The most number of seats the class can maintain..</param>
        /// <param name="OptimalNumberOfSeats">The number of seats that is most favorable to the class..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiLocation(string Id = default(string), string ClassroomIdentificationCode = default(string), EdFiSchoolReference SchoolReference = default(EdFiSchoolReference), int? MaximumNumberOfSeats = default(int?), int? OptimalNumberOfSeats = default(int?), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiLocation and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "ClassroomIdentificationCode" is required (not null)
            if (ClassroomIdentificationCode == null)
            {
                throw new InvalidDataException("ClassroomIdentificationCode is a required property for EdFiLocation and cannot be null");
            }
            else
            {
                this.ClassroomIdentificationCode = ClassroomIdentificationCode;
            }
            // to ensure "SchoolReference" is required (not null)
            if (SchoolReference == null)
            {
                throw new InvalidDataException("SchoolReference is a required property for EdFiLocation and cannot be null");
            }
            else
            {
                this.SchoolReference = SchoolReference;
            }
            this.MaximumNumberOfSeats = MaximumNumberOfSeats;
            this.OptimalNumberOfSeats = OptimalNumberOfSeats;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.</value>
        [DataMember(Name="classroomIdentificationCode", EmitDefaultValue=false)]
        public string ClassroomIdentificationCode { get; set; }

        /// <summary>
        /// Gets or Sets SchoolReference
        /// </summary>
        [DataMember(Name="schoolReference", EmitDefaultValue=false)]
        public EdFiSchoolReference SchoolReference { get; set; }

        /// <summary>
        /// The most number of seats the class can maintain.
        /// </summary>
        /// <value>The most number of seats the class can maintain.</value>
        [DataMember(Name="maximumNumberOfSeats", EmitDefaultValue=false)]
        public int? MaximumNumberOfSeats { get; set; }

        /// <summary>
        /// The number of seats that is most favorable to the class.
        /// </summary>
        /// <value>The number of seats that is most favorable to the class.</value>
        [DataMember(Name="optimalNumberOfSeats", EmitDefaultValue=false)]
        public int? OptimalNumberOfSeats { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiLocation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClassroomIdentificationCode: ").Append(ClassroomIdentificationCode).Append("\n");
            sb.Append("  SchoolReference: ").Append(SchoolReference).Append("\n");
            sb.Append("  MaximumNumberOfSeats: ").Append(MaximumNumberOfSeats).Append("\n");
            sb.Append("  OptimalNumberOfSeats: ").Append(OptimalNumberOfSeats).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiLocation);
        }

        /// <summary>
        /// Returns true if EdFiLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ClassroomIdentificationCode == input.ClassroomIdentificationCode ||
                    (this.ClassroomIdentificationCode != null &&
                    this.ClassroomIdentificationCode.Equals(input.ClassroomIdentificationCode))
                ) && 
                (
                    this.SchoolReference == input.SchoolReference ||
                    (this.SchoolReference != null &&
                    this.SchoolReference.Equals(input.SchoolReference))
                ) && 
                (
                    this.MaximumNumberOfSeats == input.MaximumNumberOfSeats ||
                    (this.MaximumNumberOfSeats != null &&
                    this.MaximumNumberOfSeats.Equals(input.MaximumNumberOfSeats))
                ) && 
                (
                    this.OptimalNumberOfSeats == input.OptimalNumberOfSeats ||
                    (this.OptimalNumberOfSeats != null &&
                    this.OptimalNumberOfSeats.Equals(input.OptimalNumberOfSeats))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ClassroomIdentificationCode != null)
                    hashCode = hashCode * 59 + this.ClassroomIdentificationCode.GetHashCode();
                if (this.SchoolReference != null)
                    hashCode = hashCode * 59 + this.SchoolReference.GetHashCode();
                if (this.MaximumNumberOfSeats != null)
                    hashCode = hashCode * 59 + this.MaximumNumberOfSeats.GetHashCode();
                if (this.OptimalNumberOfSeats != null)
                    hashCode = hashCode * 59 + this.OptimalNumberOfSeats.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ClassroomIdentificationCode (string) maxLength
            if(this.ClassroomIdentificationCode != null && this.ClassroomIdentificationCode.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassroomIdentificationCode, length must be less than 60.", new [] { "ClassroomIdentificationCode" });
            }

            yield break;
        }
    }

}
