/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiDisciplineAction
    /// </summary>
    [DataContract]
    public partial class EdFiDisciplineAction :  IEquatable<EdFiDisciplineAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDisciplineAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiDisciplineAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiDisciplineAction" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="DisciplineActionIdentifier">Identifier assigned by the education organization to the DisciplineAction. (required).</param>
        /// <param name="DisciplineDate">The date of the DisciplineAction. (required).</param>
        /// <param name="Disciplines">An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident. (required).</param>
        /// <param name="StudentDisciplineIncidentAssociations">An unordered collection of disciplineActionStudentDisciplineIncidentAssociations. Reference to the DisciplineIncident associated with the DisciplineAction. (required).</param>
        /// <param name="AssignmentSchoolReference">AssignmentSchoolReference.</param>
        /// <param name="ResponsibilitySchoolReference">ResponsibilitySchoolReference (required).</param>
        /// <param name="StudentReference">StudentReference (required).</param>
        /// <param name="ActualDisciplineActionLength">Indicates the actual length in school days of a student&#39;s disciplinary assignment..</param>
        /// <param name="DisciplineActionLength">The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable..</param>
        /// <param name="DisciplineActionLengthDifferenceReasonDescriptor">Indicates the reason for the difference, if any, between the official and actual lengths of a student&#39;s disciplinary assignment..</param>
        /// <param name="IepPlacementMeetingIndicator">An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student&#39;s Individualized Education Program (IEP) team to determine appropriate placement..</param>
        /// <param name="ReceivedEducationServicesDuringExpulsion">An indication of whether the student received educational services when removed from the regular school program for disciplinary reasons..</param>
        /// <param name="RelatedToZeroTolerancePolicy">An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies..</param>
        /// <param name="Staffs">An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the DisciplineAction..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiDisciplineAction(string Id = default(string), string DisciplineActionIdentifier = default(string), DateTime? DisciplineDate = default(DateTime?), List<EdFiDisciplineActionDiscipline> Disciplines = default(List<EdFiDisciplineActionDiscipline>), List<EdFiDisciplineActionStudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations = default(List<EdFiDisciplineActionStudentDisciplineIncidentAssociation>), EdFiSchoolReference AssignmentSchoolReference = default(EdFiSchoolReference), EdFiSchoolReference ResponsibilitySchoolReference = default(EdFiSchoolReference), EdFiStudentReference StudentReference = default(EdFiStudentReference), double? ActualDisciplineActionLength = default(double?), double? DisciplineActionLength = default(double?), string DisciplineActionLengthDifferenceReasonDescriptor = default(string), bool? IepPlacementMeetingIndicator = default(bool?), bool? ReceivedEducationServicesDuringExpulsion = default(bool?), bool? RelatedToZeroTolerancePolicy = default(bool?), List<EdFiDisciplineActionStaff> Staffs = default(List<EdFiDisciplineActionStaff>), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiDisciplineAction and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "DisciplineActionIdentifier" is required (not null)
            if (DisciplineActionIdentifier == null)
            {
                throw new InvalidDataException("DisciplineActionIdentifier is a required property for EdFiDisciplineAction and cannot be null");
            }
            else
            {
                this.DisciplineActionIdentifier = DisciplineActionIdentifier;
            }
            // to ensure "DisciplineDate" is required (not null)
            if (DisciplineDate == null)
            {
                throw new InvalidDataException("DisciplineDate is a required property for EdFiDisciplineAction and cannot be null");
            }
            else
            {
                this.DisciplineDate = DisciplineDate;
            }
            // to ensure "Disciplines" is required (not null)
            if (Disciplines == null)
            {
                throw new InvalidDataException("Disciplines is a required property for EdFiDisciplineAction and cannot be null");
            }
            else
            {
                this.Disciplines = Disciplines;
            }
            // to ensure "StudentDisciplineIncidentAssociations" is required (not null)
            if (StudentDisciplineIncidentAssociations == null)
            {
                throw new InvalidDataException("StudentDisciplineIncidentAssociations is a required property for EdFiDisciplineAction and cannot be null");
            }
            else
            {
                this.StudentDisciplineIncidentAssociations = StudentDisciplineIncidentAssociations;
            }
            // to ensure "ResponsibilitySchoolReference" is required (not null)
            if (ResponsibilitySchoolReference == null)
            {
                throw new InvalidDataException("ResponsibilitySchoolReference is a required property for EdFiDisciplineAction and cannot be null");
            }
            else
            {
                this.ResponsibilitySchoolReference = ResponsibilitySchoolReference;
            }
            // to ensure "StudentReference" is required (not null)
            if (StudentReference == null)
            {
                throw new InvalidDataException("StudentReference is a required property for EdFiDisciplineAction and cannot be null");
            }
            else
            {
                this.StudentReference = StudentReference;
            }
            this.AssignmentSchoolReference = AssignmentSchoolReference;
            this.ActualDisciplineActionLength = ActualDisciplineActionLength;
            this.DisciplineActionLength = DisciplineActionLength;
            this.DisciplineActionLengthDifferenceReasonDescriptor = DisciplineActionLengthDifferenceReasonDescriptor;
            this.IepPlacementMeetingIndicator = IepPlacementMeetingIndicator;
            this.ReceivedEducationServicesDuringExpulsion = ReceivedEducationServicesDuringExpulsion;
            this.RelatedToZeroTolerancePolicy = RelatedToZeroTolerancePolicy;
            this.Staffs = Staffs;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier assigned by the education organization to the DisciplineAction.
        /// </summary>
        /// <value>Identifier assigned by the education organization to the DisciplineAction.</value>
        [DataMember(Name="disciplineActionIdentifier", EmitDefaultValue=false)]
        public string DisciplineActionIdentifier { get; set; }

        /// <summary>
        /// The date of the DisciplineAction.
        /// </summary>
        /// <value>The date of the DisciplineAction.</value>
        [DataMember(Name="disciplineDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DisciplineDate { get; set; }

        /// <summary>
        /// An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.
        /// </summary>
        /// <value>An unordered collection of disciplineActionDisciplines. Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.</value>
        [DataMember(Name="disciplines", EmitDefaultValue=false)]
        public List<EdFiDisciplineActionDiscipline> Disciplines { get; set; }

        /// <summary>
        /// An unordered collection of disciplineActionStudentDisciplineIncidentAssociations. Reference to the DisciplineIncident associated with the DisciplineAction.
        /// </summary>
        /// <value>An unordered collection of disciplineActionStudentDisciplineIncidentAssociations. Reference to the DisciplineIncident associated with the DisciplineAction.</value>
        [DataMember(Name="studentDisciplineIncidentAssociations", EmitDefaultValue=false)]
        public List<EdFiDisciplineActionStudentDisciplineIncidentAssociation> StudentDisciplineIncidentAssociations { get; set; }

        /// <summary>
        /// Gets or Sets AssignmentSchoolReference
        /// </summary>
        [DataMember(Name="assignmentSchoolReference", EmitDefaultValue=false)]
        public EdFiSchoolReference AssignmentSchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets ResponsibilitySchoolReference
        /// </summary>
        [DataMember(Name="responsibilitySchoolReference", EmitDefaultValue=false)]
        public EdFiSchoolReference ResponsibilitySchoolReference { get; set; }

        /// <summary>
        /// Gets or Sets StudentReference
        /// </summary>
        [DataMember(Name="studentReference", EmitDefaultValue=false)]
        public EdFiStudentReference StudentReference { get; set; }

        /// <summary>
        /// Indicates the actual length in school days of a student&#39;s disciplinary assignment.
        /// </summary>
        /// <value>Indicates the actual length in school days of a student&#39;s disciplinary assignment.</value>
        [DataMember(Name="actualDisciplineActionLength", EmitDefaultValue=false)]
        public double? ActualDisciplineActionLength { get; set; }

        /// <summary>
        /// The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.
        /// </summary>
        /// <value>The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.</value>
        [DataMember(Name="disciplineActionLength", EmitDefaultValue=false)]
        public double? DisciplineActionLength { get; set; }

        /// <summary>
        /// Indicates the reason for the difference, if any, between the official and actual lengths of a student&#39;s disciplinary assignment.
        /// </summary>
        /// <value>Indicates the reason for the difference, if any, between the official and actual lengths of a student&#39;s disciplinary assignment.</value>
        [DataMember(Name="disciplineActionLengthDifferenceReasonDescriptor", EmitDefaultValue=false)]
        public string DisciplineActionLengthDifferenceReasonDescriptor { get; set; }

        /// <summary>
        /// An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student&#39;s Individualized Education Program (IEP) team to determine appropriate placement.
        /// </summary>
        /// <value>An indication as to whether an offense and/or disciplinary action resulted in a meeting of a student&#39;s Individualized Education Program (IEP) team to determine appropriate placement.</value>
        [DataMember(Name="iepPlacementMeetingIndicator", EmitDefaultValue=false)]
        public bool? IepPlacementMeetingIndicator { get; set; }

        /// <summary>
        /// An indication of whether the student received educational services when removed from the regular school program for disciplinary reasons.
        /// </summary>
        /// <value>An indication of whether the student received educational services when removed from the regular school program for disciplinary reasons.</value>
        [DataMember(Name="receivedEducationServicesDuringExpulsion", EmitDefaultValue=false)]
        public bool? ReceivedEducationServicesDuringExpulsion { get; set; }

        /// <summary>
        /// An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.
        /// </summary>
        /// <value>An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.</value>
        [DataMember(Name="relatedToZeroTolerancePolicy", EmitDefaultValue=false)]
        public bool? RelatedToZeroTolerancePolicy { get; set; }

        /// <summary>
        /// An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the DisciplineAction.
        /// </summary>
        /// <value>An unordered collection of disciplineActionStaffs. The staff responsible for enforcing the DisciplineAction.</value>
        [DataMember(Name="staffs", EmitDefaultValue=false)]
        public List<EdFiDisciplineActionStaff> Staffs { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiDisciplineAction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisciplineActionIdentifier: ").Append(DisciplineActionIdentifier).Append("\n");
            sb.Append("  DisciplineDate: ").Append(DisciplineDate).Append("\n");
            sb.Append("  Disciplines: ").Append(Disciplines).Append("\n");
            sb.Append("  StudentDisciplineIncidentAssociations: ").Append(StudentDisciplineIncidentAssociations).Append("\n");
            sb.Append("  AssignmentSchoolReference: ").Append(AssignmentSchoolReference).Append("\n");
            sb.Append("  ResponsibilitySchoolReference: ").Append(ResponsibilitySchoolReference).Append("\n");
            sb.Append("  StudentReference: ").Append(StudentReference).Append("\n");
            sb.Append("  ActualDisciplineActionLength: ").Append(ActualDisciplineActionLength).Append("\n");
            sb.Append("  DisciplineActionLength: ").Append(DisciplineActionLength).Append("\n");
            sb.Append("  DisciplineActionLengthDifferenceReasonDescriptor: ").Append(DisciplineActionLengthDifferenceReasonDescriptor).Append("\n");
            sb.Append("  IepPlacementMeetingIndicator: ").Append(IepPlacementMeetingIndicator).Append("\n");
            sb.Append("  ReceivedEducationServicesDuringExpulsion: ").Append(ReceivedEducationServicesDuringExpulsion).Append("\n");
            sb.Append("  RelatedToZeroTolerancePolicy: ").Append(RelatedToZeroTolerancePolicy).Append("\n");
            sb.Append("  Staffs: ").Append(Staffs).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiDisciplineAction);
        }

        /// <summary>
        /// Returns true if EdFiDisciplineAction instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiDisciplineAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiDisciplineAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisciplineActionIdentifier == input.DisciplineActionIdentifier ||
                    (this.DisciplineActionIdentifier != null &&
                    this.DisciplineActionIdentifier.Equals(input.DisciplineActionIdentifier))
                ) && 
                (
                    this.DisciplineDate == input.DisciplineDate ||
                    (this.DisciplineDate != null &&
                    this.DisciplineDate.Equals(input.DisciplineDate))
                ) && 
                (
                    this.Disciplines == input.Disciplines ||
                    this.Disciplines != null &&
                    this.Disciplines.SequenceEqual(input.Disciplines)
                ) && 
                (
                    this.StudentDisciplineIncidentAssociations == input.StudentDisciplineIncidentAssociations ||
                    this.StudentDisciplineIncidentAssociations != null &&
                    this.StudentDisciplineIncidentAssociations.SequenceEqual(input.StudentDisciplineIncidentAssociations)
                ) && 
                (
                    this.AssignmentSchoolReference == input.AssignmentSchoolReference ||
                    (this.AssignmentSchoolReference != null &&
                    this.AssignmentSchoolReference.Equals(input.AssignmentSchoolReference))
                ) && 
                (
                    this.ResponsibilitySchoolReference == input.ResponsibilitySchoolReference ||
                    (this.ResponsibilitySchoolReference != null &&
                    this.ResponsibilitySchoolReference.Equals(input.ResponsibilitySchoolReference))
                ) && 
                (
                    this.StudentReference == input.StudentReference ||
                    (this.StudentReference != null &&
                    this.StudentReference.Equals(input.StudentReference))
                ) && 
                (
                    this.ActualDisciplineActionLength == input.ActualDisciplineActionLength ||
                    (this.ActualDisciplineActionLength != null &&
                    this.ActualDisciplineActionLength.Equals(input.ActualDisciplineActionLength))
                ) && 
                (
                    this.DisciplineActionLength == input.DisciplineActionLength ||
                    (this.DisciplineActionLength != null &&
                    this.DisciplineActionLength.Equals(input.DisciplineActionLength))
                ) && 
                (
                    this.DisciplineActionLengthDifferenceReasonDescriptor == input.DisciplineActionLengthDifferenceReasonDescriptor ||
                    (this.DisciplineActionLengthDifferenceReasonDescriptor != null &&
                    this.DisciplineActionLengthDifferenceReasonDescriptor.Equals(input.DisciplineActionLengthDifferenceReasonDescriptor))
                ) && 
                (
                    this.IepPlacementMeetingIndicator == input.IepPlacementMeetingIndicator ||
                    (this.IepPlacementMeetingIndicator != null &&
                    this.IepPlacementMeetingIndicator.Equals(input.IepPlacementMeetingIndicator))
                ) && 
                (
                    this.ReceivedEducationServicesDuringExpulsion == input.ReceivedEducationServicesDuringExpulsion ||
                    (this.ReceivedEducationServicesDuringExpulsion != null &&
                    this.ReceivedEducationServicesDuringExpulsion.Equals(input.ReceivedEducationServicesDuringExpulsion))
                ) && 
                (
                    this.RelatedToZeroTolerancePolicy == input.RelatedToZeroTolerancePolicy ||
                    (this.RelatedToZeroTolerancePolicy != null &&
                    this.RelatedToZeroTolerancePolicy.Equals(input.RelatedToZeroTolerancePolicy))
                ) && 
                (
                    this.Staffs == input.Staffs ||
                    this.Staffs != null &&
                    this.Staffs.SequenceEqual(input.Staffs)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisciplineActionIdentifier != null)
                    hashCode = hashCode * 59 + this.DisciplineActionIdentifier.GetHashCode();
                if (this.DisciplineDate != null)
                    hashCode = hashCode * 59 + this.DisciplineDate.GetHashCode();
                if (this.Disciplines != null)
                    hashCode = hashCode * 59 + this.Disciplines.GetHashCode();
                if (this.StudentDisciplineIncidentAssociations != null)
                    hashCode = hashCode * 59 + this.StudentDisciplineIncidentAssociations.GetHashCode();
                if (this.AssignmentSchoolReference != null)
                    hashCode = hashCode * 59 + this.AssignmentSchoolReference.GetHashCode();
                if (this.ResponsibilitySchoolReference != null)
                    hashCode = hashCode * 59 + this.ResponsibilitySchoolReference.GetHashCode();
                if (this.StudentReference != null)
                    hashCode = hashCode * 59 + this.StudentReference.GetHashCode();
                if (this.ActualDisciplineActionLength != null)
                    hashCode = hashCode * 59 + this.ActualDisciplineActionLength.GetHashCode();
                if (this.DisciplineActionLength != null)
                    hashCode = hashCode * 59 + this.DisciplineActionLength.GetHashCode();
                if (this.DisciplineActionLengthDifferenceReasonDescriptor != null)
                    hashCode = hashCode * 59 + this.DisciplineActionLengthDifferenceReasonDescriptor.GetHashCode();
                if (this.IepPlacementMeetingIndicator != null)
                    hashCode = hashCode * 59 + this.IepPlacementMeetingIndicator.GetHashCode();
                if (this.ReceivedEducationServicesDuringExpulsion != null)
                    hashCode = hashCode * 59 + this.ReceivedEducationServicesDuringExpulsion.GetHashCode();
                if (this.RelatedToZeroTolerancePolicy != null)
                    hashCode = hashCode * 59 + this.RelatedToZeroTolerancePolicy.GetHashCode();
                if (this.Staffs != null)
                    hashCode = hashCode * 59 + this.Staffs.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisciplineActionIdentifier (string) maxLength
            if(this.DisciplineActionIdentifier != null && this.DisciplineActionIdentifier.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisciplineActionIdentifier, length must be less than 20.", new [] { "DisciplineActionIdentifier" });
            }

            // DisciplineActionLengthDifferenceReasonDescriptor (string) maxLength
            if(this.DisciplineActionLengthDifferenceReasonDescriptor != null && this.DisciplineActionLengthDifferenceReasonDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisciplineActionLengthDifferenceReasonDescriptor, length must be less than 306.", new [] { "DisciplineActionLengthDifferenceReasonDescriptor" });
            }

            yield break;
        }
    }

}
