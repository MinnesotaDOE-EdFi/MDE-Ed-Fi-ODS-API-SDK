/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiLearningObjective
    /// </summary>
    [DataContract]
    public partial class EdFiLearningObjective :  IEquatable<EdFiLearningObjective>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningObjective" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiLearningObjective() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiLearningObjective" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="AcademicSubjects">An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment. (required).</param>
        /// <param name="LearningObjectiveId">The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A). (required).</param>
        /// <param name="_Namespace">Namespace for the LearningObjective. (required).</param>
        /// <param name="ParentLearningObjectiveReference">ParentLearningObjectiveReference.</param>
        /// <param name="ContentStandard">ContentStandard.</param>
        /// <param name="Description">The description of the LearningObjective..</param>
        /// <param name="GradeLevels">An unordered collection of learningObjectiveGradeLevels. The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level..</param>
        /// <param name="LearningStandards">An unordered collection of learningObjectiveLearningStandards. LearningStandard(s) included in this objective..</param>
        /// <param name="Nomenclature">Reflects the specific nomenclature used for the LearningObjective..</param>
        /// <param name="Objective">The designated title of the LearningObjective. (required).</param>
        /// <param name="SuccessCriteria">One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiLearningObjective(string Id = default(string), List<EdFiLearningObjectiveAcademicSubject> AcademicSubjects = default(List<EdFiLearningObjectiveAcademicSubject>), string LearningObjectiveId = default(string), string _Namespace = default(string), EdFiLearningObjectiveReference ParentLearningObjectiveReference = default(EdFiLearningObjectiveReference), EdFiLearningObjectiveContentStandard ContentStandard = default(EdFiLearningObjectiveContentStandard), string Description = default(string), List<EdFiLearningObjectiveGradeLevel> GradeLevels = default(List<EdFiLearningObjectiveGradeLevel>), List<EdFiLearningObjectiveLearningStandard> LearningStandards = default(List<EdFiLearningObjectiveLearningStandard>), string Nomenclature = default(string), string Objective = default(string), string SuccessCriteria = default(string), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiLearningObjective and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "AcademicSubjects" is required (not null)
            if (AcademicSubjects == null)
            {
                throw new InvalidDataException("AcademicSubjects is a required property for EdFiLearningObjective and cannot be null");
            }
            else
            {
                this.AcademicSubjects = AcademicSubjects;
            }
            // to ensure "LearningObjectiveId" is required (not null)
            if (LearningObjectiveId == null)
            {
                throw new InvalidDataException("LearningObjectiveId is a required property for EdFiLearningObjective and cannot be null");
            }
            else
            {
                this.LearningObjectiveId = LearningObjectiveId;
            }
            // to ensure "_Namespace" is required (not null)
            if (_Namespace == null)
            {
                throw new InvalidDataException("_Namespace is a required property for EdFiLearningObjective and cannot be null");
            }
            else
            {
                this._Namespace = _Namespace;
            }
            // to ensure "Objective" is required (not null)
            if (Objective == null)
            {
                throw new InvalidDataException("Objective is a required property for EdFiLearningObjective and cannot be null");
            }
            else
            {
                this.Objective = Objective;
            }
            this.ParentLearningObjectiveReference = ParentLearningObjectiveReference;
            this.ContentStandard = ContentStandard;
            this.Description = Description;
            this.GradeLevels = GradeLevels;
            this.LearningStandards = LearningStandards;
            this.Nomenclature = Nomenclature;
            this.SuccessCriteria = SuccessCriteria;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.
        /// </summary>
        /// <value>An unordered collection of learningObjectiveAcademicSubjects. The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.</value>
        [DataMember(Name="academicSubjects", EmitDefaultValue=false)]
        public List<EdFiLearningObjectiveAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).
        /// </summary>
        /// <value>The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).</value>
        [DataMember(Name="learningObjectiveId", EmitDefaultValue=false)]
        public string LearningObjectiveId { get; set; }

        /// <summary>
        /// Namespace for the LearningObjective.
        /// </summary>
        /// <value>Namespace for the LearningObjective.</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string _Namespace { get; set; }

        /// <summary>
        /// Gets or Sets ParentLearningObjectiveReference
        /// </summary>
        [DataMember(Name="parentLearningObjectiveReference", EmitDefaultValue=false)]
        public EdFiLearningObjectiveReference ParentLearningObjectiveReference { get; set; }

        /// <summary>
        /// Gets or Sets ContentStandard
        /// </summary>
        [DataMember(Name="contentStandard", EmitDefaultValue=false)]
        public EdFiLearningObjectiveContentStandard ContentStandard { get; set; }

        /// <summary>
        /// The description of the LearningObjective.
        /// </summary>
        /// <value>The description of the LearningObjective.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// An unordered collection of learningObjectiveGradeLevels. The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.
        /// </summary>
        /// <value>An unordered collection of learningObjectiveGradeLevels. The grade level for which the LearningObjective is targeted. The semantics of null is assumed to mean that the learning objective is not associated with any grade level.</value>
        [DataMember(Name="gradeLevels", EmitDefaultValue=false)]
        public List<EdFiLearningObjectiveGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// An unordered collection of learningObjectiveLearningStandards. LearningStandard(s) included in this objective.
        /// </summary>
        /// <value>An unordered collection of learningObjectiveLearningStandards. LearningStandard(s) included in this objective.</value>
        [DataMember(Name="learningStandards", EmitDefaultValue=false)]
        public List<EdFiLearningObjectiveLearningStandard> LearningStandards { get; set; }

        /// <summary>
        /// Reflects the specific nomenclature used for the LearningObjective.
        /// </summary>
        /// <value>Reflects the specific nomenclature used for the LearningObjective.</value>
        [DataMember(Name="nomenclature", EmitDefaultValue=false)]
        public string Nomenclature { get; set; }

        /// <summary>
        /// The designated title of the LearningObjective.
        /// </summary>
        /// <value>The designated title of the LearningObjective.</value>
        [DataMember(Name="objective", EmitDefaultValue=false)]
        public string Objective { get; set; }

        /// <summary>
        /// One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.
        /// </summary>
        /// <value>One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.</value>
        [DataMember(Name="successCriteria", EmitDefaultValue=false)]
        public string SuccessCriteria { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiLearningObjective {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  LearningObjectiveId: ").Append(LearningObjectiveId).Append("\n");
            sb.Append("  _Namespace: ").Append(_Namespace).Append("\n");
            sb.Append("  ParentLearningObjectiveReference: ").Append(ParentLearningObjectiveReference).Append("\n");
            sb.Append("  ContentStandard: ").Append(ContentStandard).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  Nomenclature: ").Append(Nomenclature).Append("\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  SuccessCriteria: ").Append(SuccessCriteria).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiLearningObjective);
        }

        /// <summary>
        /// Returns true if EdFiLearningObjective instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiLearningObjective to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiLearningObjective input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AcademicSubjects == input.AcademicSubjects ||
                    this.AcademicSubjects != null &&
                    this.AcademicSubjects.SequenceEqual(input.AcademicSubjects)
                ) && 
                (
                    this.LearningObjectiveId == input.LearningObjectiveId ||
                    (this.LearningObjectiveId != null &&
                    this.LearningObjectiveId.Equals(input.LearningObjectiveId))
                ) && 
                (
                    this._Namespace == input._Namespace ||
                    (this._Namespace != null &&
                    this._Namespace.Equals(input._Namespace))
                ) && 
                (
                    this.ParentLearningObjectiveReference == input.ParentLearningObjectiveReference ||
                    (this.ParentLearningObjectiveReference != null &&
                    this.ParentLearningObjectiveReference.Equals(input.ParentLearningObjectiveReference))
                ) && 
                (
                    this.ContentStandard == input.ContentStandard ||
                    (this.ContentStandard != null &&
                    this.ContentStandard.Equals(input.ContentStandard))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.GradeLevels == input.GradeLevels ||
                    this.GradeLevels != null &&
                    this.GradeLevels.SequenceEqual(input.GradeLevels)
                ) && 
                (
                    this.LearningStandards == input.LearningStandards ||
                    this.LearningStandards != null &&
                    this.LearningStandards.SequenceEqual(input.LearningStandards)
                ) && 
                (
                    this.Nomenclature == input.Nomenclature ||
                    (this.Nomenclature != null &&
                    this.Nomenclature.Equals(input.Nomenclature))
                ) && 
                (
                    this.Objective == input.Objective ||
                    (this.Objective != null &&
                    this.Objective.Equals(input.Objective))
                ) && 
                (
                    this.SuccessCriteria == input.SuccessCriteria ||
                    (this.SuccessCriteria != null &&
                    this.SuccessCriteria.Equals(input.SuccessCriteria))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AcademicSubjects != null)
                    hashCode = hashCode * 59 + this.AcademicSubjects.GetHashCode();
                if (this.LearningObjectiveId != null)
                    hashCode = hashCode * 59 + this.LearningObjectiveId.GetHashCode();
                if (this._Namespace != null)
                    hashCode = hashCode * 59 + this._Namespace.GetHashCode();
                if (this.ParentLearningObjectiveReference != null)
                    hashCode = hashCode * 59 + this.ParentLearningObjectiveReference.GetHashCode();
                if (this.ContentStandard != null)
                    hashCode = hashCode * 59 + this.ContentStandard.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.GradeLevels != null)
                    hashCode = hashCode * 59 + this.GradeLevels.GetHashCode();
                if (this.LearningStandards != null)
                    hashCode = hashCode * 59 + this.LearningStandards.GetHashCode();
                if (this.Nomenclature != null)
                    hashCode = hashCode * 59 + this.Nomenclature.GetHashCode();
                if (this.Objective != null)
                    hashCode = hashCode * 59 + this.Objective.GetHashCode();
                if (this.SuccessCriteria != null)
                    hashCode = hashCode * 59 + this.SuccessCriteria.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LearningObjectiveId (string) maxLength
            if(this.LearningObjectiveId != null && this.LearningObjectiveId.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LearningObjectiveId, length must be less than 60.", new [] { "LearningObjectiveId" });
            }

            // _Namespace (string) maxLength
            if(this._Namespace != null && this._Namespace.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for _Namespace, length must be less than 255.", new [] { "_Namespace" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Nomenclature (string) maxLength
            if(this.Nomenclature != null && this.Nomenclature.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nomenclature, length must be less than 35.", new [] { "Nomenclature" });
            }

            // Objective (string) maxLength
            if(this.Objective != null && this.Objective.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Objective, length must be less than 60.", new [] { "Objective" });
            }

            // SuccessCriteria (string) maxLength
            if(this.SuccessCriteria != null && this.SuccessCriteria.Length > 150)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SuccessCriteria, length must be less than 150.", new [] { "SuccessCriteria" });
            }

            yield break;
        }
    }

}
