/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiCredential
    /// </summary>
    [DataContract]
    public partial class EdFiCredential :  IEquatable<EdFiCredential>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCredential" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiCredential() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiCredential" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="CredentialIdentifier">Identifier or serial number assigned to the credential. (required).</param>
        /// <param name="GradeLevels">An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching. (required).</param>
        /// <param name="StateOfIssueStateAbbreviationDescriptor">The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued. (required).</param>
        /// <param name="AcademicSubjects">An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains..</param>
        /// <param name="CredentialFieldDescriptor">The field of certification for the certificate (e.g., Mathematics, Music). (required).</param>
        /// <param name="CredentialTypeDescriptor">An indication of the category of credential an individual holds. (required).</param>
        /// <param name="EffectiveDate">The year, month and day on which an active credential held by an individual was issued..</param>
        /// <param name="Endorsements">An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization..</param>
        /// <param name="ExpirationDate">The month, day, and year on which an active credential held by an individual will expire..</param>
        /// <param name="IssuanceDate">The month, day, and year on which an active credential was issued to an individual. (required).</param>
        /// <param name="_Namespace">Namespace for the Credential. (required).</param>
        /// <param name="TeachingCredentialBasisDescriptor">An indication of the pre-determined criteria for granting the teaching credential that an individual holds..</param>
        /// <param name="TeachingCredentialDescriptor">An indication of the category of a legal document giving authorization to perform teaching assignment services. (required).</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiCredential(string Id = default(string), string CredentialIdentifier = default(string), List<EdFiCredentialGradeLevel> GradeLevels = default(List<EdFiCredentialGradeLevel>), string StateOfIssueStateAbbreviationDescriptor = default(string), List<EdFiCredentialAcademicSubject> AcademicSubjects = default(List<EdFiCredentialAcademicSubject>), string CredentialFieldDescriptor = default(string), string CredentialTypeDescriptor = default(string), DateTime? EffectiveDate = default(DateTime?), List<EdFiCredentialEndorsement> Endorsements = default(List<EdFiCredentialEndorsement>), DateTime? ExpirationDate = default(DateTime?), DateTime? IssuanceDate = default(DateTime?), string _Namespace = default(string), string TeachingCredentialBasisDescriptor = default(string), string TeachingCredentialDescriptor = default(string), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiCredential and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "CredentialIdentifier" is required (not null)
            if (CredentialIdentifier == null)
            {
                throw new InvalidDataException("CredentialIdentifier is a required property for EdFiCredential and cannot be null");
            }
            else
            {
                this.CredentialIdentifier = CredentialIdentifier;
            }
            // to ensure "GradeLevels" is required (not null)
            if (GradeLevels == null)
            {
                throw new InvalidDataException("GradeLevels is a required property for EdFiCredential and cannot be null");
            }
            else
            {
                this.GradeLevels = GradeLevels;
            }
            // to ensure "StateOfIssueStateAbbreviationDescriptor" is required (not null)
            if (StateOfIssueStateAbbreviationDescriptor == null)
            {
                throw new InvalidDataException("StateOfIssueStateAbbreviationDescriptor is a required property for EdFiCredential and cannot be null");
            }
            else
            {
                this.StateOfIssueStateAbbreviationDescriptor = StateOfIssueStateAbbreviationDescriptor;
            }
            // to ensure "CredentialFieldDescriptor" is required (not null)
            if (CredentialFieldDescriptor == null)
            {
                throw new InvalidDataException("CredentialFieldDescriptor is a required property for EdFiCredential and cannot be null");
            }
            else
            {
                this.CredentialFieldDescriptor = CredentialFieldDescriptor;
            }
            // to ensure "CredentialTypeDescriptor" is required (not null)
            if (CredentialTypeDescriptor == null)
            {
                throw new InvalidDataException("CredentialTypeDescriptor is a required property for EdFiCredential and cannot be null");
            }
            else
            {
                this.CredentialTypeDescriptor = CredentialTypeDescriptor;
            }
            // to ensure "IssuanceDate" is required (not null)
            if (IssuanceDate == null)
            {
                throw new InvalidDataException("IssuanceDate is a required property for EdFiCredential and cannot be null");
            }
            else
            {
                this.IssuanceDate = IssuanceDate;
            }
            // to ensure "_Namespace" is required (not null)
            if (_Namespace == null)
            {
                throw new InvalidDataException("_Namespace is a required property for EdFiCredential and cannot be null");
            }
            else
            {
                this._Namespace = _Namespace;
            }
            // to ensure "TeachingCredentialDescriptor" is required (not null)
            if (TeachingCredentialDescriptor == null)
            {
                throw new InvalidDataException("TeachingCredentialDescriptor is a required property for EdFiCredential and cannot be null");
            }
            else
            {
                this.TeachingCredentialDescriptor = TeachingCredentialDescriptor;
            }
            this.AcademicSubjects = AcademicSubjects;
            this.EffectiveDate = EffectiveDate;
            this.Endorsements = Endorsements;
            this.ExpirationDate = ExpirationDate;
            this.TeachingCredentialBasisDescriptor = TeachingCredentialBasisDescriptor;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Identifier or serial number assigned to the credential.
        /// </summary>
        /// <value>Identifier or serial number assigned to the credential.</value>
        [DataMember(Name="credentialIdentifier", EmitDefaultValue=false)]
        public string CredentialIdentifier { get; set; }

        /// <summary>
        /// An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.
        /// </summary>
        /// <value>An unordered collection of credentialGradeLevels. The grade level(s) certified for teaching.</value>
        [DataMember(Name="gradeLevels", EmitDefaultValue=false)]
        public List<EdFiCredentialGradeLevel> GradeLevels { get; set; }

        /// <summary>
        /// The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.
        /// </summary>
        /// <value>The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.</value>
        [DataMember(Name="stateOfIssueStateAbbreviationDescriptor", EmitDefaultValue=false)]
        public string StateOfIssueStateAbbreviationDescriptor { get; set; }

        /// <summary>
        /// An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.
        /// </summary>
        /// <value>An unordered collection of credentialAcademicSubjects. The academic subjects to which the credential pertains.</value>
        [DataMember(Name="academicSubjects", EmitDefaultValue=false)]
        public List<EdFiCredentialAcademicSubject> AcademicSubjects { get; set; }

        /// <summary>
        /// The field of certification for the certificate (e.g., Mathematics, Music).
        /// </summary>
        /// <value>The field of certification for the certificate (e.g., Mathematics, Music).</value>
        [DataMember(Name="credentialFieldDescriptor", EmitDefaultValue=false)]
        public string CredentialFieldDescriptor { get; set; }

        /// <summary>
        /// An indication of the category of credential an individual holds.
        /// </summary>
        /// <value>An indication of the category of credential an individual holds.</value>
        [DataMember(Name="credentialTypeDescriptor", EmitDefaultValue=false)]
        public string CredentialTypeDescriptor { get; set; }

        /// <summary>
        /// The year, month and day on which an active credential held by an individual was issued.
        /// </summary>
        /// <value>The year, month and day on which an active credential held by an individual was issued.</value>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.
        /// </summary>
        /// <value>An unordered collection of credentialEndorsements. Endorsements are attachments to teaching certificates and indicate areas of specialization.</value>
        [DataMember(Name="endorsements", EmitDefaultValue=false)]
        public List<EdFiCredentialEndorsement> Endorsements { get; set; }

        /// <summary>
        /// The month, day, and year on which an active credential held by an individual will expire.
        /// </summary>
        /// <value>The month, day, and year on which an active credential held by an individual will expire.</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// The month, day, and year on which an active credential was issued to an individual.
        /// </summary>
        /// <value>The month, day, and year on which an active credential was issued to an individual.</value>
        [DataMember(Name="issuanceDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? IssuanceDate { get; set; }

        /// <summary>
        /// Namespace for the Credential.
        /// </summary>
        /// <value>Namespace for the Credential.</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string _Namespace { get; set; }

        /// <summary>
        /// An indication of the pre-determined criteria for granting the teaching credential that an individual holds.
        /// </summary>
        /// <value>An indication of the pre-determined criteria for granting the teaching credential that an individual holds.</value>
        [DataMember(Name="teachingCredentialBasisDescriptor", EmitDefaultValue=false)]
        public string TeachingCredentialBasisDescriptor { get; set; }

        /// <summary>
        /// An indication of the category of a legal document giving authorization to perform teaching assignment services.
        /// </summary>
        /// <value>An indication of the category of a legal document giving authorization to perform teaching assignment services.</value>
        [DataMember(Name="teachingCredentialDescriptor", EmitDefaultValue=false)]
        public string TeachingCredentialDescriptor { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiCredential {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CredentialIdentifier: ").Append(CredentialIdentifier).Append("\n");
            sb.Append("  GradeLevels: ").Append(GradeLevels).Append("\n");
            sb.Append("  StateOfIssueStateAbbreviationDescriptor: ").Append(StateOfIssueStateAbbreviationDescriptor).Append("\n");
            sb.Append("  AcademicSubjects: ").Append(AcademicSubjects).Append("\n");
            sb.Append("  CredentialFieldDescriptor: ").Append(CredentialFieldDescriptor).Append("\n");
            sb.Append("  CredentialTypeDescriptor: ").Append(CredentialTypeDescriptor).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  Endorsements: ").Append(Endorsements).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  IssuanceDate: ").Append(IssuanceDate).Append("\n");
            sb.Append("  _Namespace: ").Append(_Namespace).Append("\n");
            sb.Append("  TeachingCredentialBasisDescriptor: ").Append(TeachingCredentialBasisDescriptor).Append("\n");
            sb.Append("  TeachingCredentialDescriptor: ").Append(TeachingCredentialDescriptor).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiCredential);
        }

        /// <summary>
        /// Returns true if EdFiCredential instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiCredential to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiCredential input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CredentialIdentifier == input.CredentialIdentifier ||
                    (this.CredentialIdentifier != null &&
                    this.CredentialIdentifier.Equals(input.CredentialIdentifier))
                ) && 
                (
                    this.GradeLevels == input.GradeLevels ||
                    this.GradeLevels != null &&
                    this.GradeLevels.SequenceEqual(input.GradeLevels)
                ) && 
                (
                    this.StateOfIssueStateAbbreviationDescriptor == input.StateOfIssueStateAbbreviationDescriptor ||
                    (this.StateOfIssueStateAbbreviationDescriptor != null &&
                    this.StateOfIssueStateAbbreviationDescriptor.Equals(input.StateOfIssueStateAbbreviationDescriptor))
                ) && 
                (
                    this.AcademicSubjects == input.AcademicSubjects ||
                    this.AcademicSubjects != null &&
                    this.AcademicSubjects.SequenceEqual(input.AcademicSubjects)
                ) && 
                (
                    this.CredentialFieldDescriptor == input.CredentialFieldDescriptor ||
                    (this.CredentialFieldDescriptor != null &&
                    this.CredentialFieldDescriptor.Equals(input.CredentialFieldDescriptor))
                ) && 
                (
                    this.CredentialTypeDescriptor == input.CredentialTypeDescriptor ||
                    (this.CredentialTypeDescriptor != null &&
                    this.CredentialTypeDescriptor.Equals(input.CredentialTypeDescriptor))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.Endorsements == input.Endorsements ||
                    this.Endorsements != null &&
                    this.Endorsements.SequenceEqual(input.Endorsements)
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.IssuanceDate == input.IssuanceDate ||
                    (this.IssuanceDate != null &&
                    this.IssuanceDate.Equals(input.IssuanceDate))
                ) && 
                (
                    this._Namespace == input._Namespace ||
                    (this._Namespace != null &&
                    this._Namespace.Equals(input._Namespace))
                ) && 
                (
                    this.TeachingCredentialBasisDescriptor == input.TeachingCredentialBasisDescriptor ||
                    (this.TeachingCredentialBasisDescriptor != null &&
                    this.TeachingCredentialBasisDescriptor.Equals(input.TeachingCredentialBasisDescriptor))
                ) && 
                (
                    this.TeachingCredentialDescriptor == input.TeachingCredentialDescriptor ||
                    (this.TeachingCredentialDescriptor != null &&
                    this.TeachingCredentialDescriptor.Equals(input.TeachingCredentialDescriptor))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CredentialIdentifier != null)
                    hashCode = hashCode * 59 + this.CredentialIdentifier.GetHashCode();
                if (this.GradeLevels != null)
                    hashCode = hashCode * 59 + this.GradeLevels.GetHashCode();
                if (this.StateOfIssueStateAbbreviationDescriptor != null)
                    hashCode = hashCode * 59 + this.StateOfIssueStateAbbreviationDescriptor.GetHashCode();
                if (this.AcademicSubjects != null)
                    hashCode = hashCode * 59 + this.AcademicSubjects.GetHashCode();
                if (this.CredentialFieldDescriptor != null)
                    hashCode = hashCode * 59 + this.CredentialFieldDescriptor.GetHashCode();
                if (this.CredentialTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.CredentialTypeDescriptor.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.Endorsements != null)
                    hashCode = hashCode * 59 + this.Endorsements.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.IssuanceDate != null)
                    hashCode = hashCode * 59 + this.IssuanceDate.GetHashCode();
                if (this._Namespace != null)
                    hashCode = hashCode * 59 + this._Namespace.GetHashCode();
                if (this.TeachingCredentialBasisDescriptor != null)
                    hashCode = hashCode * 59 + this.TeachingCredentialBasisDescriptor.GetHashCode();
                if (this.TeachingCredentialDescriptor != null)
                    hashCode = hashCode * 59 + this.TeachingCredentialDescriptor.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CredentialIdentifier (string) maxLength
            if(this.CredentialIdentifier != null && this.CredentialIdentifier.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CredentialIdentifier, length must be less than 60.", new [] { "CredentialIdentifier" });
            }

            // StateOfIssueStateAbbreviationDescriptor (string) maxLength
            if(this.StateOfIssueStateAbbreviationDescriptor != null && this.StateOfIssueStateAbbreviationDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StateOfIssueStateAbbreviationDescriptor, length must be less than 306.", new [] { "StateOfIssueStateAbbreviationDescriptor" });
            }

            // CredentialFieldDescriptor (string) maxLength
            if(this.CredentialFieldDescriptor != null && this.CredentialFieldDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CredentialFieldDescriptor, length must be less than 306.", new [] { "CredentialFieldDescriptor" });
            }

            // CredentialTypeDescriptor (string) maxLength
            if(this.CredentialTypeDescriptor != null && this.CredentialTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CredentialTypeDescriptor, length must be less than 306.", new [] { "CredentialTypeDescriptor" });
            }

            // _Namespace (string) maxLength
            if(this._Namespace != null && this._Namespace.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for _Namespace, length must be less than 255.", new [] { "_Namespace" });
            }

            // TeachingCredentialBasisDescriptor (string) maxLength
            if(this.TeachingCredentialBasisDescriptor != null && this.TeachingCredentialBasisDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TeachingCredentialBasisDescriptor, length must be less than 306.", new [] { "TeachingCredentialBasisDescriptor" });
            }

            // TeachingCredentialDescriptor (string) maxLength
            if(this.TeachingCredentialDescriptor != null && this.TeachingCredentialDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TeachingCredentialDescriptor, length must be less than 306.", new [] { "TeachingCredentialDescriptor" });
            }

            yield break;
        }
    }

}
