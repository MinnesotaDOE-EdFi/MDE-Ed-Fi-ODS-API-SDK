/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiProgram
    /// </summary>
    [DataContract]
    public partial class EdFiProgram :  IEquatable<EdFiProgram>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgram" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiProgram() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiProgram" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="ProgramName">The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies. (required).</param>
        /// <param name="ProgramTypeDescriptor">The type of program. (required).</param>
        /// <param name="EducationOrganizationReference">EducationOrganizationReference (required).</param>
        /// <param name="Characteristics">An unordered collection of programCharacteristics. Reflects important characteristics of the Program, such as categories or particular indications..</param>
        /// <param name="LearningObjectives">An unordered collection of programLearningObjectives. References the LearningObjective(s) with which the Program is associated..</param>
        /// <param name="LearningStandards">An unordered collection of programLearningStandards. LearningStandard followed by this program..</param>
        /// <param name="ProgramId">A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity..</param>
        /// <param name="Services">An unordered collection of programServices. Defines the services this program provides to students..</param>
        /// <param name="Sponsors">An unordered collection of programSponsors. Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual&#39;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization)..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiProgram(string Id = default(string), string ProgramName = default(string), string ProgramTypeDescriptor = default(string), EdFiEducationOrganizationReference EducationOrganizationReference = default(EdFiEducationOrganizationReference), List<EdFiProgramCharacteristic> Characteristics = default(List<EdFiProgramCharacteristic>), List<EdFiProgramLearningObjective> LearningObjectives = default(List<EdFiProgramLearningObjective>), List<EdFiProgramLearningStandard> LearningStandards = default(List<EdFiProgramLearningStandard>), string ProgramId = default(string), List<EdFiProgramService> Services = default(List<EdFiProgramService>), List<EdFiProgramSponsor> Sponsors = default(List<EdFiProgramSponsor>), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiProgram and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "ProgramName" is required (not null)
            if (ProgramName == null)
            {
                throw new InvalidDataException("ProgramName is a required property for EdFiProgram and cannot be null");
            }
            else
            {
                this.ProgramName = ProgramName;
            }
            // to ensure "ProgramTypeDescriptor" is required (not null)
            if (ProgramTypeDescriptor == null)
            {
                throw new InvalidDataException("ProgramTypeDescriptor is a required property for EdFiProgram and cannot be null");
            }
            else
            {
                this.ProgramTypeDescriptor = ProgramTypeDescriptor;
            }
            // to ensure "EducationOrganizationReference" is required (not null)
            if (EducationOrganizationReference == null)
            {
                throw new InvalidDataException("EducationOrganizationReference is a required property for EdFiProgram and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = EducationOrganizationReference;
            }
            this.Characteristics = Characteristics;
            this.LearningObjectives = LearningObjectives;
            this.LearningStandards = LearningStandards;
            this.ProgramId = ProgramId;
            this.Services = Services;
            this.Sponsors = Sponsors;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.
        /// </summary>
        /// <value>The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.</value>
        [DataMember(Name="programName", EmitDefaultValue=false)]
        public string ProgramName { get; set; }

        /// <summary>
        /// The type of program.
        /// </summary>
        /// <value>The type of program.</value>
        [DataMember(Name="programTypeDescriptor", EmitDefaultValue=false)]
        public string ProgramTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// An unordered collection of programCharacteristics. Reflects important characteristics of the Program, such as categories or particular indications.
        /// </summary>
        /// <value>An unordered collection of programCharacteristics. Reflects important characteristics of the Program, such as categories or particular indications.</value>
        [DataMember(Name="characteristics", EmitDefaultValue=false)]
        public List<EdFiProgramCharacteristic> Characteristics { get; set; }

        /// <summary>
        /// An unordered collection of programLearningObjectives. References the LearningObjective(s) with which the Program is associated.
        /// </summary>
        /// <value>An unordered collection of programLearningObjectives. References the LearningObjective(s) with which the Program is associated.</value>
        [DataMember(Name="learningObjectives", EmitDefaultValue=false)]
        public List<EdFiProgramLearningObjective> LearningObjectives { get; set; }

        /// <summary>
        /// An unordered collection of programLearningStandards. LearningStandard followed by this program.
        /// </summary>
        /// <value>An unordered collection of programLearningStandards. LearningStandard followed by this program.</value>
        [DataMember(Name="learningStandards", EmitDefaultValue=false)]
        public List<EdFiProgramLearningStandard> LearningStandards { get; set; }

        /// <summary>
        /// A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.
        /// </summary>
        /// <value>A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.</value>
        [DataMember(Name="programId", EmitDefaultValue=false)]
        public string ProgramId { get; set; }

        /// <summary>
        /// An unordered collection of programServices. Defines the services this program provides to students.
        /// </summary>
        /// <value>An unordered collection of programServices. Defines the services this program provides to students.</value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<EdFiProgramService> Services { get; set; }

        /// <summary>
        /// An unordered collection of programSponsors. Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual&#39;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).
        /// </summary>
        /// <value>An unordered collection of programSponsors. Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual&#39;s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).</value>
        [DataMember(Name="sponsors", EmitDefaultValue=false)]
        public List<EdFiProgramSponsor> Sponsors { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiProgram {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProgramName: ").Append(ProgramName).Append("\n");
            sb.Append("  ProgramTypeDescriptor: ").Append(ProgramTypeDescriptor).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  Characteristics: ").Append(Characteristics).Append("\n");
            sb.Append("  LearningObjectives: ").Append(LearningObjectives).Append("\n");
            sb.Append("  LearningStandards: ").Append(LearningStandards).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Sponsors: ").Append(Sponsors).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiProgram);
        }

        /// <summary>
        /// Returns true if EdFiProgram instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiProgram to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiProgram input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProgramName == input.ProgramName ||
                    (this.ProgramName != null &&
                    this.ProgramName.Equals(input.ProgramName))
                ) && 
                (
                    this.ProgramTypeDescriptor == input.ProgramTypeDescriptor ||
                    (this.ProgramTypeDescriptor != null &&
                    this.ProgramTypeDescriptor.Equals(input.ProgramTypeDescriptor))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.Characteristics == input.Characteristics ||
                    this.Characteristics != null &&
                    this.Characteristics.SequenceEqual(input.Characteristics)
                ) && 
                (
                    this.LearningObjectives == input.LearningObjectives ||
                    this.LearningObjectives != null &&
                    this.LearningObjectives.SequenceEqual(input.LearningObjectives)
                ) && 
                (
                    this.LearningStandards == input.LearningStandards ||
                    this.LearningStandards != null &&
                    this.LearningStandards.SequenceEqual(input.LearningStandards)
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    (this.ProgramId != null &&
                    this.ProgramId.Equals(input.ProgramId))
                ) && 
                (
                    this.Services == input.Services ||
                    this.Services != null &&
                    this.Services.SequenceEqual(input.Services)
                ) && 
                (
                    this.Sponsors == input.Sponsors ||
                    this.Sponsors != null &&
                    this.Sponsors.SequenceEqual(input.Sponsors)
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProgramName != null)
                    hashCode = hashCode * 59 + this.ProgramName.GetHashCode();
                if (this.ProgramTypeDescriptor != null)
                    hashCode = hashCode * 59 + this.ProgramTypeDescriptor.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.Characteristics != null)
                    hashCode = hashCode * 59 + this.Characteristics.GetHashCode();
                if (this.LearningObjectives != null)
                    hashCode = hashCode * 59 + this.LearningObjectives.GetHashCode();
                if (this.LearningStandards != null)
                    hashCode = hashCode * 59 + this.LearningStandards.GetHashCode();
                if (this.ProgramId != null)
                    hashCode = hashCode * 59 + this.ProgramId.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Sponsors != null)
                    hashCode = hashCode * 59 + this.Sponsors.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ProgramName (string) maxLength
            if(this.ProgramName != null && this.ProgramName.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramName, length must be less than 60.", new [] { "ProgramName" });
            }

            // ProgramTypeDescriptor (string) maxLength
            if(this.ProgramTypeDescriptor != null && this.ProgramTypeDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramTypeDescriptor, length must be less than 306.", new [] { "ProgramTypeDescriptor" });
            }

            // ProgramId (string) maxLength
            if(this.ProgramId != null && this.ProgramId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, length must be less than 20.", new [] { "ProgramId" });
            }

            yield break;
        }
    }

}
