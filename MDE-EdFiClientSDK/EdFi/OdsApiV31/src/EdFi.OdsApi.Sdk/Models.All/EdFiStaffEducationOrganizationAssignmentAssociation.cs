/* 
 * Ed-Fi Operational Data Store API
 *
 * The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface. The Ed-Fi ODS / API supports both transactional and bulk modes of operation.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  *** 
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdFi.OdsApi.Sdk.Client.SwaggerDateConverter;

namespace EdFi.OdsApi.Sdk.Models.All
{
    /// <summary>
    /// EdFiStaffEducationOrganizationAssignmentAssociation
    /// </summary>
    [DataContract]
    public partial class EdFiStaffEducationOrganizationAssignmentAssociation :  IEquatable<EdFiStaffEducationOrganizationAssignmentAssociation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationAssignmentAssociation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EdFiStaffEducationOrganizationAssignmentAssociation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EdFiStaffEducationOrganizationAssignmentAssociation" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="BeginDate">Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the LEA. (required).</param>
        /// <param name="StaffClassificationDescriptor">The titles of employment, official status, or rank of education staff. (required).</param>
        /// <param name="CredentialReference">CredentialReference.</param>
        /// <param name="EducationOrganizationReference">EducationOrganizationReference (required).</param>
        /// <param name="EmploymentStaffEducationOrganizationEmploymentAssociationReference">EmploymentStaffEducationOrganizationEmploymentAssociationReference.</param>
        /// <param name="StaffReference">StaffReference (required).</param>
        /// <param name="EndDate">Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the LEA..</param>
        /// <param name="OrderOfAssignment">Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc..</param>
        /// <param name="PositionTitle">The descriptive name of an individual&#39;s position..</param>
        /// <param name="Etag">A unique system-generated value that identifies the version of the resource..</param>
        public EdFiStaffEducationOrganizationAssignmentAssociation(string Id = default(string), DateTime? BeginDate = default(DateTime?), string StaffClassificationDescriptor = default(string), EdFiCredentialReference CredentialReference = default(EdFiCredentialReference), EdFiEducationOrganizationReference EducationOrganizationReference = default(EdFiEducationOrganizationReference), EdFiStaffEducationOrganizationEmploymentAssociationReference EmploymentStaffEducationOrganizationEmploymentAssociationReference = default(EdFiStaffEducationOrganizationEmploymentAssociationReference), EdFiStaffReference StaffReference = default(EdFiStaffReference), DateTime? EndDate = default(DateTime?), int? OrderOfAssignment = default(int?), string PositionTitle = default(string), string Etag = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EdFiStaffEducationOrganizationAssignmentAssociation and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "BeginDate" is required (not null)
            if (BeginDate == null)
            {
                throw new InvalidDataException("BeginDate is a required property for EdFiStaffEducationOrganizationAssignmentAssociation and cannot be null");
            }
            else
            {
                this.BeginDate = BeginDate;
            }
            // to ensure "StaffClassificationDescriptor" is required (not null)
            if (StaffClassificationDescriptor == null)
            {
                throw new InvalidDataException("StaffClassificationDescriptor is a required property for EdFiStaffEducationOrganizationAssignmentAssociation and cannot be null");
            }
            else
            {
                this.StaffClassificationDescriptor = StaffClassificationDescriptor;
            }
            // to ensure "EducationOrganizationReference" is required (not null)
            if (EducationOrganizationReference == null)
            {
                throw new InvalidDataException("EducationOrganizationReference is a required property for EdFiStaffEducationOrganizationAssignmentAssociation and cannot be null");
            }
            else
            {
                this.EducationOrganizationReference = EducationOrganizationReference;
            }
            // to ensure "StaffReference" is required (not null)
            if (StaffReference == null)
            {
                throw new InvalidDataException("StaffReference is a required property for EdFiStaffEducationOrganizationAssignmentAssociation and cannot be null");
            }
            else
            {
                this.StaffReference = StaffReference;
            }
            this.CredentialReference = CredentialReference;
            this.EmploymentStaffEducationOrganizationEmploymentAssociationReference = EmploymentStaffEducationOrganizationEmploymentAssociationReference;
            this.EndDate = EndDate;
            this.OrderOfAssignment = OrderOfAssignment;
            this.PositionTitle = PositionTitle;
            this.Etag = Etag;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the LEA.
        /// </summary>
        /// <value>Month, day, and year of the start or effective date of a staff member&#39;s employment, contract, or relationship with the LEA.</value>
        [DataMember(Name="beginDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BeginDate { get; set; }

        /// <summary>
        /// The titles of employment, official status, or rank of education staff.
        /// </summary>
        /// <value>The titles of employment, official status, or rank of education staff.</value>
        [DataMember(Name="staffClassificationDescriptor", EmitDefaultValue=false)]
        public string StaffClassificationDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets CredentialReference
        /// </summary>
        [DataMember(Name="credentialReference", EmitDefaultValue=false)]
        public EdFiCredentialReference CredentialReference { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationReference
        /// </summary>
        [DataMember(Name="educationOrganizationReference", EmitDefaultValue=false)]
        public EdFiEducationOrganizationReference EducationOrganizationReference { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentStaffEducationOrganizationEmploymentAssociationReference
        /// </summary>
        [DataMember(Name="employmentStaffEducationOrganizationEmploymentAssociationReference", EmitDefaultValue=false)]
        public EdFiStaffEducationOrganizationEmploymentAssociationReference EmploymentStaffEducationOrganizationEmploymentAssociationReference { get; set; }

        /// <summary>
        /// Gets or Sets StaffReference
        /// </summary>
        [DataMember(Name="staffReference", EmitDefaultValue=false)]
        public EdFiStaffReference StaffReference { get; set; }

        /// <summary>
        /// Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the LEA.
        /// </summary>
        /// <value>Month, day, and year of the end or termination date of a staff member&#39;s employment, contract, or relationship with the LEA.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc.
        /// </summary>
        /// <value>Describes whether the assignment is this the staff member&#39;s primary assignment, secondary assignment, etc.</value>
        [DataMember(Name="orderOfAssignment", EmitDefaultValue=false)]
        public int? OrderOfAssignment { get; set; }

        /// <summary>
        /// The descriptive name of an individual&#39;s position.
        /// </summary>
        /// <value>The descriptive name of an individual&#39;s position.</value>
        [DataMember(Name="positionTitle", EmitDefaultValue=false)]
        public string PositionTitle { get; set; }

        /// <summary>
        /// A unique system-generated value that identifies the version of the resource.
        /// </summary>
        /// <value>A unique system-generated value that identifies the version of the resource.</value>
        [DataMember(Name="_etag", EmitDefaultValue=false)]
        public string Etag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EdFiStaffEducationOrganizationAssignmentAssociation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  StaffClassificationDescriptor: ").Append(StaffClassificationDescriptor).Append("\n");
            sb.Append("  CredentialReference: ").Append(CredentialReference).Append("\n");
            sb.Append("  EducationOrganizationReference: ").Append(EducationOrganizationReference).Append("\n");
            sb.Append("  EmploymentStaffEducationOrganizationEmploymentAssociationReference: ").Append(EmploymentStaffEducationOrganizationEmploymentAssociationReference).Append("\n");
            sb.Append("  StaffReference: ").Append(StaffReference).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  OrderOfAssignment: ").Append(OrderOfAssignment).Append("\n");
            sb.Append("  PositionTitle: ").Append(PositionTitle).Append("\n");
            sb.Append("  Etag: ").Append(Etag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EdFiStaffEducationOrganizationAssignmentAssociation);
        }

        /// <summary>
        /// Returns true if EdFiStaffEducationOrganizationAssignmentAssociation instances are equal
        /// </summary>
        /// <param name="input">Instance of EdFiStaffEducationOrganizationAssignmentAssociation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EdFiStaffEducationOrganizationAssignmentAssociation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BeginDate == input.BeginDate ||
                    (this.BeginDate != null &&
                    this.BeginDate.Equals(input.BeginDate))
                ) && 
                (
                    this.StaffClassificationDescriptor == input.StaffClassificationDescriptor ||
                    (this.StaffClassificationDescriptor != null &&
                    this.StaffClassificationDescriptor.Equals(input.StaffClassificationDescriptor))
                ) && 
                (
                    this.CredentialReference == input.CredentialReference ||
                    (this.CredentialReference != null &&
                    this.CredentialReference.Equals(input.CredentialReference))
                ) && 
                (
                    this.EducationOrganizationReference == input.EducationOrganizationReference ||
                    (this.EducationOrganizationReference != null &&
                    this.EducationOrganizationReference.Equals(input.EducationOrganizationReference))
                ) && 
                (
                    this.EmploymentStaffEducationOrganizationEmploymentAssociationReference == input.EmploymentStaffEducationOrganizationEmploymentAssociationReference ||
                    (this.EmploymentStaffEducationOrganizationEmploymentAssociationReference != null &&
                    this.EmploymentStaffEducationOrganizationEmploymentAssociationReference.Equals(input.EmploymentStaffEducationOrganizationEmploymentAssociationReference))
                ) && 
                (
                    this.StaffReference == input.StaffReference ||
                    (this.StaffReference != null &&
                    this.StaffReference.Equals(input.StaffReference))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.OrderOfAssignment == input.OrderOfAssignment ||
                    (this.OrderOfAssignment != null &&
                    this.OrderOfAssignment.Equals(input.OrderOfAssignment))
                ) && 
                (
                    this.PositionTitle == input.PositionTitle ||
                    (this.PositionTitle != null &&
                    this.PositionTitle.Equals(input.PositionTitle))
                ) && 
                (
                    this.Etag == input.Etag ||
                    (this.Etag != null &&
                    this.Etag.Equals(input.Etag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BeginDate != null)
                    hashCode = hashCode * 59 + this.BeginDate.GetHashCode();
                if (this.StaffClassificationDescriptor != null)
                    hashCode = hashCode * 59 + this.StaffClassificationDescriptor.GetHashCode();
                if (this.CredentialReference != null)
                    hashCode = hashCode * 59 + this.CredentialReference.GetHashCode();
                if (this.EducationOrganizationReference != null)
                    hashCode = hashCode * 59 + this.EducationOrganizationReference.GetHashCode();
                if (this.EmploymentStaffEducationOrganizationEmploymentAssociationReference != null)
                    hashCode = hashCode * 59 + this.EmploymentStaffEducationOrganizationEmploymentAssociationReference.GetHashCode();
                if (this.StaffReference != null)
                    hashCode = hashCode * 59 + this.StaffReference.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.OrderOfAssignment != null)
                    hashCode = hashCode * 59 + this.OrderOfAssignment.GetHashCode();
                if (this.PositionTitle != null)
                    hashCode = hashCode * 59 + this.PositionTitle.GetHashCode();
                if (this.Etag != null)
                    hashCode = hashCode * 59 + this.Etag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StaffClassificationDescriptor (string) maxLength
            if(this.StaffClassificationDescriptor != null && this.StaffClassificationDescriptor.Length > 306)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StaffClassificationDescriptor, length must be less than 306.", new [] { "StaffClassificationDescriptor" });
            }

            // PositionTitle (string) maxLength
            if(this.PositionTitle != null && this.PositionTitle.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PositionTitle, length must be less than 100.", new [] { "PositionTitle" });
            }

            yield break;
        }
    }

}
